<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns="http://relaxng.org/ns/structure/1.0"   
  ns="http://www.daisy.org/ns/z3986/authoring/features/select/"
  xmlns:sel="http://www.daisy.org/ns/z3986/authoring/features/select/"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
  xmlns:dcterms="http://purl.org/dc/terms/"
  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
  xmlns:z="http://www.daisy.org/ns/z3986/annotations/#"    
  xmlns:sch="http://purl.oclc.org/dsdl/schematron">

  <rdf:RDF>
    <rdf:Description>
      <dcterms:title z:short="select">The Content Selection Feature</dcterms:title>
      <dcterms:description>Provides a mechanism for defining alternate renditions of 
        content fragments, and a mechanism for defining conditional expressions that 
        allow runtime selection of these renditions.</dcterms:description>
      <z:info>Two variants of the {select} element are available: one for use in a [[#z3986.Block.class Block]] 
        context and a second for use in a [[#z3986.Phrase.class Phrase]] context.</z:info>
      <dcterms:publisher>DAISY Consortium</dcterms:publisher>
      <dcterms:license rdf:resource="{LICENSE_TODO}"/>
      <dcterms:creator>Markus Gylling</dcterms:creator>
      <dcterms:issued>2009-12-21</dcterms:issued>
      <dcterms:requires rdf:resource="z3986-global-classes.rng"/>
    </rdf:Description>
  </rdf:RDF>
      
  <div>

    <define name="z3986.select.phrase">
      <element name="select">
        <rdf:RDF>
          <rdf:Description>
            <dcterms:title z:short="sel:select (Phrase)">The select element (Phrase)</dcterms:title>
            <dcterms:description>Container for content selection declarations in a Phrase context.</dcterms:description>
            <dcterms:isRequiredBy rdf:resource="."/>
            <z:context>{[[#z3986.Phrase.class]]}</z:context>
            <z:content z:alterability="fixed">{[[#z3986.when.phrase]]+, [[#z3986.otherwise.phrase]]}</z:content>
            <z:attlist>{[[#xml.id.attrib]]?,[[#xml.base.attrib]]?}</z:attlist>
          </rdf:Description>
        </rdf:RDF>
        <ref name="z3986.select.attlist" />
        <ref name="z3986.select.phrase.content" />
      </element>
    </define>

    <define name="z3986.select.block">
      <element name="select">
        <rdf:RDF>
          <rdf:Description>
            <dcterms:title z:short="sel:select (Block)">The select element (Block)</dcterms:title>
            <dcterms:description>Container for content selection declarations in a Block context.</dcterms:description>
            <dcterms:isRequiredBy rdf:resource="."/>
            <z:context>{[[#z3986.Block.class]]}</z:context>
            <z:content z:alterability="fixed">{[[#z3986.when.block]]+, [[#z3986.otherwise.block]]}</z:content>
            <z:attlist>{[[#xml.id.attrib]]?,[[#xml.base.attrib]]?}</z:attlist>
          </rdf:Description>
        </rdf:RDF>
        <ref name="z3986.select.attlist" />
        <ref name="z3986.select.block.content" />
      </element>
    </define>

    <define name="z3986.select.phrase.content">
      <oneOrMore>
        <ref name="z3986.when.phrase" />
      </oneOrMore>
      <ref name="z3986.otherwise.phrase" />
    </define>

    <define name="z3986.select.block.content">
      <oneOrMore>
        <ref name="z3986.when.block" />
      </oneOrMore>
      <ref name="z3986.otherwise.block" />
    </define>

    <define name="z3986.select.attlist">
      <optional>
        <ref name="xml.id.attrib" />
      </optional>
      <optional>
        <ref name="xml.base.attrib" />
      </optional>
    </define>

  </div>

  <div>
    
    <define name="z3986.when.phrase">
      <element name="when">
        <rdf:RDF>
          <rdf:Description>
            <dcterms:title z:short="sel:when (Phrase)">The when element (Phrase)</dcterms:title>
            <dcterms:description>Container for a content fragment, associated with a selection condition.</dcterms:description>
            <dcterms:isRequiredBy rdf:resource="."/>
            <z:context z:alterability="fixed">{[[#z3986.select.phrase]]}</z:context>
            <z:content>{(text | [[#z3986.Text.class]] | [[#z3986.Phrase.class]])+}</z:content>
            <z:attlist>{[[#xml.id.attrib]]?, [[#z3986.expr.attrib]]}</z:attlist>
          </rdf:Description>
        </rdf:RDF>
        <ref name="z3986.when.attlist" />
        <ref name="z3986.when.phrase.content" />
      </element>
    </define>

    <define name="z3986.when.block">
      <element name="when">
        <rdf:RDF>
          <rdf:Description>
            <dcterms:title z:short="sel:when (Block)">The when element (Block)</dcterms:title>
            <dcterms:description>Container for a content fragment, associated with a selection condition.</dcterms:description>
            <dcterms:isRequiredBy rdf:resource="."/>
            <z:context z:alterability="fixed">{[[#z3986.select.block]]}</z:context>
            <z:content>{[[#z3986.Block.class]]+}</z:content>
            <z:attlist>{[[#xml.id.attrib]]?, [[#z3986.expr.attrib]]}</z:attlist>
          </rdf:Description>
        </rdf:RDF>
        <ref name="z3986.when.attlist" />
        <ref name="z3986.when.block.content" />
      </element>
    </define>

    <define name="z3986.when.attlist">
      <optional>
        <ref name="xml.id.attrib" />
      </optional>
      <ref name="z3986.expr.attrib" />
    </define>

    <define name="z3986.when.phrase.content">
      <a:documentation>Note that this content model must be set so that the result of replacing the 
      entire select element with the content of one its when or otherwise children does not result
      in invalidity.</a:documentation>
      <ref name="z3986.Phrase.Text.mix.model" />
    </define>

    <define name="z3986.when.block.content">
      <a:documentation>Note that this content model must be set so that the result of replacing the 
        entire select element with the content of one its when or otherwise children does not result
        in invalidity.</a:documentation>
      <ref name="z3986.Block.model" />
    </define>

  </div>

  <div>
    
    <define name="z3986.otherwise.phrase">
      <element name="otherwise">
        <rdf:RDF>
          <rdf:Description>
            <dcterms:title z:short="sel:otherwise (Phrase)">The otherwise element (Phrase)</dcterms:title>
            <dcterms:description>Container for a content fragment to be selected if none of the preceding 
              {[[#z3986.when.phrase]]} conditions evaluated to true.</dcterms:description>
            <dcterms:isRequiredBy rdf:resource="."/>
            <z:context z:alterability="fixed">{[[#z3986.select.phrase]]}</z:context>
            <z:content>{(text | [[#z3986.Text.class]] | [[#z3986.Phrase.class]])+}</z:content>
            <z:attlist>{[[#xml.id.attrib]]?}</z:attlist>
          </rdf:Description>
        </rdf:RDF>
        <ref name="z3986.otherwise.attlist" />
        <ref name="z3986.otherwise.phrase.content" />
        <sch:rule context="sel:otherwise">
          <sch:assert
            test="not(descendant::sel:select)"
            >The {sel:otherwise} element must not have {sel:select} descendants.</sch:assert>
        </sch:rule>
      </element>
    </define>

    <define name="z3986.otherwise.block">
      <element name="otherwise">
        <rdf:RDF>
          <rdf:Description>
            <dcterms:title z:short="sel:otherwise (Block)">The otherwise element (Block)</dcterms:title>
            <dcterms:description>Container for a content fragment to be selected if none of the preceding 
              {[[#z3986.when.block]]} conditions evaluated to true.</dcterms:description>
            <dcterms:isRequiredBy rdf:resource="."/>
            <z:context z:alterability="fixed">{[[#z3986.select.block]]}</z:context>
            <z:content>{[[#z3986.Block.class]]+}</z:content>
            <z:attlist>{[[#xml.id.attrib]]?}</z:attlist>
          </rdf:Description>
        </rdf:RDF>
        <ref name="z3986.otherwise.attlist" />
        <ref name="z3986.otherwise.block.content" />
      </element>
    </define>

    <define name="z3986.otherwise.phrase.content">
      <ref name="z3986.Phrase.Text.mix.model" />
    </define>

    <define name="z3986.otherwise.block.content">
      <ref name="z3986.Block.model" />
    </define>

    <define name="z3986.otherwise.attlist">
      <optional>
        <ref name="xml.id.attrib" />
      </optional>
    </define>

  </div>

  <div>
    
    <define name="z3986.expr.attrib">
      <attribute name="expr">
        <rdf:RDF>
          <rdf:Description>
            <dcterms:title z:short="expr">The expr attribute</dcterms:title>
            <dcterms:description>The {expr} attribute contains a conditional expression.</dcterms:description>   
            <z:info>Refer to the [[http://www.daisy.org/z3986/2011/auth/features/select/ Content Selection Feature]] for
              information on syntax and function set association.</z:info>
            <z:context>{[[#z3986.when.block]]} and {[[#z3986.when.phrase]]}</z:context>
            <z:content z:alterability="fixed">{[[#z3986.select.ConditionalExpression.datatype]]}</z:content>            
          </rdf:Description>
        </rdf:RDF>
        <ref name="z3986.select.ConditionalExpression.datatype" />
      </attribute>
    </define>

    <define name="z3986.select.ConditionalExpression.datatype">
      <rdf:RDF>
        <rdf:Description>
          <dcterms:title z:short="ConditionalExpression">The Content selection feature {ConditionalExpression} datatype</dcterms:title>          
          <dcterms:description>A conditional expression, as defined in [[http://www.daisy.org/z3986/2011/auth/features/select/current/#conditionalexpression Conditional Expression]]</dcterms:description>          
          <dcterms:isRequiredBy rdf:resource="."/>
        </rdf:Description>
      </rdf:RDF>            
      <data type="string" />
    </define>

  </div>

  <div>
    <a:documentation>Z39.86 Content Selection feature - content model contribution</a:documentation>

    <define name="z3986.Block.contrib.class" combine="choice">
      <ref name="z3986.select.block" />
    </define>

    <define name="z3986.Phrase.contrib.class" combine="choice">
      <ref name="z3986.select.phrase" />
    </define>

  </div>

</grammar>
