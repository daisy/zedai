<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../../util/docbook/rng/docbook.rng" type="xml"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>ANSI/NISO Z39.86-2010 Part A</title>
    <subtitle>Z39.86 Authoring and Interchange Framework Specification</subtitle>

    <info>
        <releaseinfo>Working draft</releaseinfo>
        <pubdate>30 April 2010</pubdate>
        <annotation xml:id="editors">
            <para>
                <personname>James Pritchett</personname>, <orgname>Recording for the Blind &amp;
                    Dyslexic</orgname>
                <email>jpritchett@rfbd.org</email>
            </para>
            <para>
                <personname>Markus Gylling</personname>, <orgname>DAISY Consortium</orgname>
                <email>mgylling@daisy.org</email>
            </para>
            <para>
                <personname>Matt Garrish</personname>, <orgname>Invited Expert</orgname>
            </para>
        </annotation>
        <abstract>
            <title>Abstract</title>
            <para>The Z39.86 Authoring and Interchange (Z39.86-AI) Framework is a means of defining
                XML markup languages to represent different kinds of information resources (books,
                periodicals, etc.), with the intent of producing documents suitable for
                transformation into different universally accessible formats. It uses a modular,
                extensible architecture to permit the creation of any number of document models,
                each custom-tailored for a particular kind of information resource.</para>
        </abstract>
    </info>

    <chapter xml:id="introduction" conformance="informative">
        <title>Introduction</title>

        <section xml:id="introductionAudience">
            <title>Audience</title>

            <para> This specification details the nature of Z39.86-AI profiles and how they are
                created. It is specifically intended for agencies interested in creating profiles to
                mark up new types of documents, and to processing agent implementors.</para>
            <para> This specification is not a guide to marking up Z39.86-AI documents and should
                not be referenced as such. Informative documentation resources on Z39.86-AI document
                production is available independently of this specification. </para>
            <para> Although this specification contains introductory sections where appropriate and
                deals with general document concepts in places, it is expected that all persons
                reading this specification will have a strong background in XML and its related
                technologies, in particular schema languages and their composition, in order to
                properly implement new profiles. </para>
        </section>

        <section xml:id="introductionDesignGoals">
            <title>Design goals</title>
            <para> The Z39.86-AI Framework has been built with these primary design goals in mind: </para>

            <orderedlist>
                <listitem>
                    <para><emphasis>Adaptability</emphasis>. The Framework is designed to be
                        flexible and customizable across a wide variety of production environments.
                        Producers are not locked down to a pre-defined schema, but can use the
                        built-in mechanisms for customization and extension to fit the Framework to
                        their specific requirements: profiles adapt to fit the information resources
                        they describe instead of the other way around; localizations are easily
                        implemented; and, deployment in production environments where either
                        complex/rich or simple/reduced markup is used is easily accommodated.</para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Modularity</emphasis>. Framework profiles build their models in
                        discrete schema modules, building on and incorporating existing profiles and
                        standards where possible. The schema modules created for specific profiles,
                        in turn, can be used within other profiles. This approach reduces the amount
                        of work required to create new profiles and develop tools to process them by
                        progressively reducing the number of custom components needed to build any
                        new profile. </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Self-describing</emphasis>. The Framework is designed to move
                        beyond the often contentious issue of XML tag names alone defining the
                        semantics of the structures they represent. RDF metadata is an integral
                        component of the Framework, allowing profile and document creators finer
                        control when defining the intent of the structures in documents. The
                        Framework also offers flexibility in attaching metadata records to
                        documents, allowing multiple bibliographic record types to be attached to a
                        document to meet the various needs that that document will serve. </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Data repurposing</emphasis>. The primary goal of the specification
                        is to facilitate the parallel publishing of documents through its open
                        modular framework. Z39.86-AI profiles are intended to provide the essential
                        structures that compose documents in an unambiguous and format-agnostic way,
                        and are like a master blueprint to the information resources they describe.
                        As a result, Z39.86-AI documents can be manipulated through automated
                        transformation chains &#8212; such as specified by the XProc standard (<xref
                            linkend="refXPROC"/>) &#8212; to create output formats (e.g., print,
                        EPUB, DAISY Digital Talking Books) and to create the inputs for alternate
                        publishing processes (e.g., braille). </para>
                </listitem>
            </orderedlist>

        </section>

        <section xml:id="introductionSpecOverview">
            <title>Overview</title>

            <para> The Z39.86-AI specification is composed of numerous parts that work together to
                allow the creation of profiles for structuring information resources, a process
                which may seem complicated at first glance. This section provides a bird's eye
                perspective on how all of these pieces fit together in order to facilitate the
                reading of the specification. </para>

            <para> The following diagram shows how the process of profile creation flows from
                concept to practical document: </para>

            <mediaobject xml:id="specOverview_figure">
                <alt> The image shows the process of creating a profile through a flowchart-like
                    procession of boxes moving from top to bottom. At the top is the Abstract
                    Document Model, which is the starting point for creating any profile, as it
                    describes the composition rules. An arrow leads from this box to a more
                    intricate series of bounded boxes that together constitute profiles. Immediately
                    inside this profile box is a box that contains the main elements in creating a
                    markup model for a profile. The first component is the core markup model, which
                    is composed of the core modules and any other modules used. The second component
                    depicts the extensions and adaptions that go into creating the markup model:
                    features, metadata and the semantic inflection of elements. The profiles box
                    then has an arrow that leads to the final outputs of the process: the
                    publication of the profile via its resource directory document and the ability
                    to package documents in an OCF-based container. </alt>
                <imageobject>
                    <imagedata fileref="./img/ai-overview.png"/>
                </imageobject>
                <caption>
                    <para>Overview of the Z39.86-AI profile creation process</para>
                </caption>
            </mediaobject>

            <para> At the base of the Z39.86-AI specification is the Abstract Document Model, which
                introduces the framework common across all profile implementations, and the
                high-level rules to which profile creators must adhere in order to ensure
                consistency and predictability between grammars. The Abstract Document Model is like
                a map to building profiles and its concepts are fully introduced in <xref
                    linkend="abstractDocumentModel"/>. </para>

            <para> Profiles are the practical product of the Z39.86-AI specification, and take the
                form of markup models defining the structure of an information resource. The rules
                and requirements for creating them are detailed in <xref linkend="profiles"/>. </para>

            <para> Profiles are built on the modular model familiarly employed in XHTML 1.1
                Modularization (<xref linkend="refXHTMLMOD11"/>). The following sections of the
                specification introduce the components specifically involved in their construction: </para>

            <itemizedlist>
                <listitem>
                    <para>
                        <xref linkend="modules"/> &#8212; modules are sets of elements and
                        attributes that are semantically and/or structurally linked through the
                        traits they exhibit. Modules are activated when creating profiles and their
                        components become the building blocks for composing the new grammar. </para>
                </listitem>
                <listitem>
                    <para>
                        <xref linkend="coreModules"/> &#8212; the core modules are a set of modules
                        created by the Z39.86-AI Working Group and maintained by the Z39.86 Advisory
                        Committee to encourage re-use of components across profiles. </para>
                </listitem>
                <listitem>
                    <para>
                        <xref linkend="features"/> &#8212; like a cross between profiles in
                        miniature and highly-specialized modules, features provide comprehensive
                        markup to represent very particular kinds of structures (e.g. MathML, Ruby,
                        etc.). Features help ensure the consistency of specialized markup between
                        Z39.86-AI documents and ensure that Z39.86-AI profiles are properly aligned
                        with industry standards. </para>
                </listitem>
            </itemizedlist>

            <para> RDF is the primary means provided by the Framework for the expression of metadata
                about documents and for the semantic inflection of meaning on elements they contain.
                Although profile creators can use other methods to annotate their data, the use of
                RDF is encouraged because of its tight binding to the specification. Information on
                how to apply the available attributes and vocabularies can be found in <xref
                    linkend="rdfVocabularies"/>. </para>

            <para> A completed profile will typically consist of a number of different resource,
                such as schema files, RDF vocabularies, additional prose restrictions as well as
                usage and other documentation. Publishing of a profile is the act of assigning it
                identity URI (see <xref linkend="profileConformanceIdentityURI"/>), at which
                location a resource directory document is available that enumerates these documents
                and provides additional information on how to obtain them. Complete information on
                how to create resource directories and documents is available in <xref
                    linkend="resourcedirectory"/>. </para>

            <para> This specification also includes a catalog of profiles that have been made
                publicly available for use creating documents, which is available in <xref
                    linkend="catalogs"/>. These profiles can be used as is, used as models to create
                new profiles, or completely disregarded depending on the needs of producers. </para>

            <para> Although the specification is not specifically geared toward document creators,
                it does contain information about the general nature of document creation, including
                how to specify the profile the document conforms to, any features in use, as well as
                required metadata that must be included to identify the document. This information
                can be found in <xref linkend="documents"/>. </para>

            <para> The specification also includes a packaging format based on the OCF standard
                    (<xref linkend="refOCF"/>), which can be used to bundle the xml, image and other
                local resources that comprise the a Z39.86-AI document set. It also specifies a mime
                type for the container format to facilitate the interchange of these files. This
                information can be found in <xref linkend="container"/> and in <xref
                    linkend="mediaTypeRegistration"/>. </para>

            <para> In addition to gaining a full understanding of all the topics outlined above,
                processing agent developers must also ensure that their applications meet the
                conformance requirements detailed in <xref linkend="processingAgentConformance"/>. </para>

        </section>

        <section xml:id="relationships">
            <title>Relationship to other specifications</title>

            <para>This standard is based on the specific versions of the standards and
                specifications referenced herein, which are used as defined except as noted by this
                document. Any refinement or replacement of a referenced specification by a newer or
                different version is not directly applicable to this standard. Conformance to this
                standard is based on the versions of the standards and specifications in effect at
                the time of this writing.</para>

            <section xml:id="relationshipsZ39862010B">
                <title>Z39.86-2010 Part B</title>
                <para>Z39.86-2010 Part B defines different end-user accessible formats for
                    information resources.  The procedures for defining markup languages and
                    profiles given in this specification are designed to create documents that are
                    easily transformed into the accessible formats described by Z39.86-2010 Part B.
                     However, this is not an exclusive relationship.  Documents conforming to a
                    Framework profile may be transformed into many other formats not described by
                    Z39.86-2010 Part B, and accessible formats described by that specification may
                    be created from documents in formats not conforming to this
                    specification.</para>
            </section>

            <section xml:id="relationshipsZ39862005">
                <title>Z39.86-2005</title>
                <para>Z39.86-2010 Part A and B jointly form a functional expansion of the <citation
                        linkend="refZ39862005">Z39.86-2005</citation> specification.  Z39.86-2010
                    Part A represents an entirely new technical direction that supersedes Section 4
                        <link xlink:href="http://www.niso.org/workrooms/daisy/Z39-86-2005.html#Text"
                        >“Content Format for Text”</link> of Z39.86-2005.  As such, text content
                    files compliant under Z39.86-2005 will not be compliant under Z39.86-2010 and
                    vice versa.</para>
            </section>

            <section xml:id="relationshipsXML">
                <title>XML</title>
                <para>The document types defined by Z39.86-2010 Part A inherit all constraints
                    defined by <citation linkend="refXML">Extensible Markup Language (XML) 1.0
                        (Fourth Edition)</citation>.</para>
                <para><remark role="todo">REMARK Refer to <link
                            xlink:href="http://code.google.com/p/zednext/issues/detail?id=108">Issue
                            108</link></remark></para>
            </section>

            <section xml:id="relationshipsXHTMLMOD">
                <title>XHTML Modularization 1.1</title>
                <para> The modular approach to profile definition employed in this Framework was
                    designed to facilitate the interchange of modules with similarly-designed
                    grammars, and in particular modules designed to be compatible with the <link
                        linkend="refXHTMLMOD11">XHTML Modularization 1.1</link> specification. As a
                    result, Z39.86-AI modules can be used in the XHTML Modularization framework, and
                    vice versa.</para>
            </section>

            <section xml:id="relationshipsUnicode">
                <title>Unicode</title>
                <para>This specification inherits its relation to Unicode from <xref
                        linkend="refXML"/>.</para>
            </section>
        </section>

        <section xml:id="terminology">
            <title>Terminology</title>
            <variablelist>
                <varlistentry>
                    <term>Class</term>
                    <listitem>
                        <para> A class represents an abstract means of referring to a set of element
                            and/or attribute declarations associated with a layer or set in the
                                <link linkend="abstractDocumentModel">Abstract Document
                            Model</link>. Classes correspond to name classes in <xref
                                linkend="refRelaxNG"/> and named groups in <xref
                                linkend="refXMLSchema"/>. </para>
                        <para> Classes are dynamically populated depending on which modules and
                            components are activated in a profile. Classes do not constitute content
                            model templates, but are collections of declarations that can be used to
                            create concrete content models. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Component</term>
                    <listitem>
                        <para> An individual element, attribute, datatype, value or pattern as
                            defined in a module or feature. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Customization</term>
                    <listitem>
                        <para> An element or attribute whose usage context, content model and/or
                            attribute model have been altered from their default state during
                            activation. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Feature</term>
                    <listitem>
                        <para>A partial markup model designed to represent a limited,
                            highly-specialized set of content structures. Mathematical equations,
                            chemistry formulas, and musical notations are examples of the kinds of
                            content structures that might be addressed by a Z39.86-AI feature.
                             Features share the same general structure as profiles, but are more
                            specialized and of narrower scope and are intended to be used as
                            discrete components within profiles.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Implicit value</term>
                    <listitem>
                        <para> The value a Processing Agent must assume for an attribute when the
                            attribute is not present. Implicit value declarations may apply to all
                            elements that can contain the attribute or only to elements in
                            particular contexts.</para>
                        <para> Each component's definition defines the implicit values a Processing
                            Agent must apply. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Markup model</term>
                    <listitem>
                        <para>The markup vocabulary (i.e., the gamut of element and attribute names,
                            notations, etc.) and grammar (i.e., the prescribed use of that
                            vocabulary) as defined by a schema. The markup model is the concrete
                            representation in markup syntax of an abstract document model, and may
                            be defined with varying levels of strict conformity.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Module</term>
                    <listitem>
                        <para>An abstract unit within a markup model expressed as a schema fragment,
                            used to consolidate markup declarations to increase the flexibility,
                            modifiability, reuse and understanding of specific logical or semantic
                            structures.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Module Activation</term>
                    <listitem>
                        <para> The act of including a module in a profile, thereby including all or
                            some of its components in the markup model. Activation can include
                            making alterations to the traits of the module components, as well as
                            excluding components entirely. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Module/Component Definition</term>
                    <listitem>
                        <para> A human readable set of statements describing the default state and
                            nature of a module and/or its components prior to activation, using a
                            mixture of prose, <xref linkend="refRNC"/> syntax and other means. </para>
                        <para> The module and component definitions must not be relied on to provide
                            information about the practical implementation of that module or
                            component as employed in any Z39.86-AI profile. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Processing Agent</term>
                    <listitem>
                        <para>An application that processes a Z39.86-AI document. Examples include,
                            but are not limited to, authoring tools (XML editors, XML-enabled word
                            processors), transformation pipelines, business transfer chains and
                            conformance validators.</para>
                        <para> The domain of processing agents defined by this specification only
                            encompasses the lifecycle of a Z39.86-AI document's creation,
                            transformation and provision. End user tools that render the content of
                            a document, whether the Z39.86-AI document source or the outputs
                            generated from it, do not fall under the scope or conformance
                            requirements outlined in this specification. </para>
                        <para>Note that this definition does not include <link
                                xlink:href="http://www.w3.org/TR/REC-xml/#dt-xml-proc">XML
                                Processor</link> as defined in <xref linkend="refXML"/>.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Profile</term>
                    <listitem>
                        <para>An integrated markup model (element set and grammar) and associated
                            RDF vocabulary designed to represent information resources of a
                            particular type.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>RDF vocabulary</term>
                    <listitem>
                        <para>An vocabulary of terms that provides a mechanism to annotate elements
                            or element content with machine-extractable semantic information about
                            their nature or purpose.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Resource directory</term>
                    <listitem>
                        <para>A package of information regarding a profile or feature, including
                            normative schemas, informative schemas, RDF vocabularies, documentation,
                            stylesheets, or other associated resources. Resource directories are
                            expressed in XHTML+RDFa (per <xref linkend="refRDFa"/>).</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Specialization</term>
                    <listitem>
                        <para> An element or attribute that inherits some or all of it traits from
                            another element, but that serves a more specific semantic purpose. </para>
                        <para> Elements contributed to a layer in the <link
                                linkend="abstractDocumentModel">Abstract Document Model</link>
                            typically inherit a set of basic traits from that layer's default
                            member, and are thus specializations of the default member.
                            Specializations may, however, be derived from any member of a layer, in
                            which case the default member's traits are only indirectly inherited. </para>
                        <para> Unlike variants, specializations do not share the same <link
                                linkend="refXMLNamespaces">QName</link> with the element they
                            inherit traits from. </para>
                    </listitem>
                </varlistentry>
                <!--                <varlistentry>
                    <term>Trait</term>
                    <listitem>
                        <para> A single aspect of the overall nature of a component, such as the
                            semantic definition or the initial content model. Refer to <xref
                                linkend="modulesComponentTraits"/> for more information. </para>
                    </listitem>
                </varlistentry>
-->
                <varlistentry>
                    <term>Variant</term>
                    <listitem>
                        <para> An element that derives its semantic definition from another element
                            but that is intended for use in a different layer of the <link
                                linkend="abstractDocumentModel">Abstract Document Model</link> than
                            the element it is derived from. </para>
                        <para> A variant shares the same <link linkend="refXMLNamespaces"
                                >QName</link> as the element it is derived from. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Z39.86-AI document</term>
                    <listitem>
                        <para>An XML document that conforms to a Z39.86-AI profile.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Z39.86-AI document set</term>
                    <listitem>
                        <para> A Z39.86-AI document together with any local and remote resources
                            referenced by it. </para>
                        <para> Local resources are defined as those that are referenced in a
                            Z39.86-AI document by a file URI scheme (<xref linkend="refRFC1738"/>)
                            and must accompany the document in order to create a valid
                            representation of it, while remote resources do not directly accompany
                            the document but can be obtained according to their URI schemes. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <xi:include href="./xinc/conformanceexpressions.xml" parse="xml"/>

    </chapter>

    <chapter xml:id="abstractDocumentModel">
        <title>Abstract Document Model</title>

        <section xml:id="abstractDocumentModel_intro" conformance="informative">
            <title>Introduction</title>

            <para>The Abstract Document Model underpins the Z39.86-AI specification, providing the
                base structure through which all document profiles are defined. The Abstract
                Document Model is both a concept for defining the structure of documents and a model
                for creating valid Z39.86-AI profiles: it decomposes documents into a standard
                foundation that contains four layers of increasing structural granularity and adds
                two complementary collections of attributes that flow through them, and exposes all
                of its parts for customization and extension:</para>

            <mediaobject xml:id="abstractDocumentModel_figure">
                <alt> A depiction of the document foundation and four hierarchical layers of the
                    Abstract Document Model as boxes embedded in each other. To the right side of
                    this pyramid of boxes lie the two attribute collections with an arrow pointing
                    into the layers to indicate how they feed into all. </alt>
                <imageobject>
                    <imagedata fileref="./img/ai-adm.png"/>
                </imageobject>
                <caption>
                    <para>The document foundation and four layers of the Abstract Document
                        Model.</para>
                </caption>
            </mediaobject>

            <para>Moving structurally from the foundation to the inner-most Text layer, the Abstract
                Document Model provides the level of abstraction necessary to retain commonality
                between profiles while leaving open the definition of what a document is to profile
                creators. As a result, the Abstract Document Model can be used to create schematic
                definitions for documents across a wide spectrum of formats and fields while
                retaining a predictable core structure.</para>

            <para>The Z39.86-AI specification was built on the Abstract Document Model specifically
                to address the problem of extensibility that existed in earlier versions of the
                standard. No single schema can encompass all document types and provide all the
                structure and flexibility necessary for all accessible formats, and though extension
                points were introduced in previous specifications to try and address this problem,
                they were done in a way that did not allow full document recomposition.</para>

            <para>The Abstract Document Model instead provides a common framework and over-arching
                set of rules in which profiles can be built without imposing unnecessary production
                and semantic restrictions. With the ability to insert new components at each layer,
                and at the same time leverage the components available in the <link
                    linkend="coreModules">core modules</link> and from external features, the
                Z39.86-AI specification unshackles production from the monolithic approach of
                pre-defined and rigid content models.</para>
        </section>

        <section xml:id="abstractDocumentModel_fundamentals">
            <title>Fundamentals</title>

            <section xml:id="abstractDocumentModel_docFoundation">
                <title>Document foundation</title>

                <para> At the root of the Abstract Document Model is the document foundation. The
                    foundation, as its name implies, defines the concrete concept of a document and
                    provides the practical containers through which the layers operate to define
                    information resources. </para>

                <para> The document foundation also represents the universal concept of a Z39.86-AI
                    document: that a document is composed of two containers: one to contain metadata
                    and other informational resources and another to express the body content of the
                    document. The foundation and this principle are constants across all profile
                    implementations. </para>
            </section>

            <section xml:id="abstractDocumentModel_docStructureLayers">
                <title>Document structure layers</title>

                <para>The Abstract Document Model comprises a hierarchy of four layers that define a
                    document's internal structure from its most general sense to its most
                    concrete:</para>

                <itemizedlist>
                    <listitem>
                        <para>the <link linkend="abstractDocumentModel_sectionLayer">Section
                                layer</link> &#8212; which defines primary structural divisions
                            within documents;</para>
                    </listitem>
                    <listitem>
                        <para>the <link linkend="abstractDocumentModel_blockLayer">Block
                                layer</link> &#8212; which defines the major structural elements
                            that occur within sections of documents;</para>
                    </listitem>
                    <listitem>
                        <para>the <link linkend="abstractDocumentModel_phraseLayer">Phrase
                                layer</link> &#8212; which defines the textual constructs that
                            compose block elements; and</para>
                    </listitem>
                    <listitem>
                        <para>the <link linkend="abstractDocumentModel_textLayer">Text layer</link>
                            &#8212; the mixture of character data and character elements at the root
                            of all the bounding layers.</para>
                    </listitem>
                </itemizedlist>

                <para>The four structural layers of the Abstract Document Model are a change from
                    previous versions of the specification in that they formally lay out a set of
                    common features for documents and add granularity to the concept of block and
                    inline elements. The new Section layer abstracts higher-level document structure
                    concepts and the Text layer formally separates character data from the "inline"
                    concept, providing a finer-grained data modeling system in which to design and
                    build profiles.</para>

                <para>Moving down through the Abstract Document Model, each layer is structurally
                    subservient to the layers that contain it, also meaning that no layer can
                    contain elements from a superordinate layer.</para>
            </section>

            <section xml:id="abstractDocumentModel_docAttributeCollection">
                <title>Document attribute collection</title>

                <para>The Abstract Document Model also comprises two attribute collections that
                    augment and supplement the information in the <link
                        linkend="abstractDocumentModel_docStructureLayers">document structure
                        layers</link>:</para>

                <itemizedlist>
                    <listitem>
                        <para>the <link linkend="abstractDocumentModel_metaAttributesCollection"
                                >Metadata Attributes collection</link> &#8212; which defines
                            metadata attributes for describing information about documents and
                            inflecting structures with semantic meaning.</para>
                    </listitem>
                    <listitem>
                        <para>the <link linkend="abstractDocumentModel_globalAttributesCollection"
                                >Global Attributes collection</link> &#8212; which defines common
                            attributes that are available to all elements in a document.</para>
                    </listitem>
                </itemizedlist>

                <para>Although distinct from the structural layers and from each other, these sets
                    behave in similar fashion in the way that they provide cross-document
                    capabilities to annotate structures. The sets are not bound or constrained by
                    the structural layers, but are available to them as needed in agreement with
                    each layer's own nature and rules.</para>

                <para> The Metadata Attributes collection provides attributes for attaching metadata
                    information directly to elements within a document to augment and enhance their
                    default nature (e.g., providing the mechanism to distinguish the role of
                    generalized elements). These attributes can be used both on elements in the body
                    of documents and to supplement any metadata elements in the header. </para>

                <para>The Global Attributes collection similarly provides a mechanism for appending
                    common attributes across the entire markup model. These attributes typically
                    provide instructions and hints to processing agents, but any attribute can be
                    added if it meets the criteria of universal applicability (typical attributes in
                    this layer include the specially-defined XML attributes and attributes used for
                    internationalization purposes).</para>
            </section>

            <section xml:id="abstractDocumentModel_constraints">
                <title>Constraints</title>

                <para>The hierarchical principle of layer containment is the core property of the
                    Abstract Document Model, and provides the foundation for the following set of
                    constraints when creating new Z39.86-AI profiles:</para>

                <orderedlist>
                    <listitem>
                        <para><emphasis>Redefinition of the <code>document</code> element is not
                                permitted.</emphasis> Allowing the nature of the element to be
                            changed would invalidate the Abstract Document Model and make the
                            document concept a moving target.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis>Every element in a layer must adhere to the definition of
                                content for that layer.</emphasis> This rule ensures the
                            hierarchical principle of the Abstract Document Model is respected when
                            building profiles, and prevents creators from altering the model to
                            force elements out of their proper context (e.g., to prevent block
                            elements from being pushed into the Section layer for display purposes
                            only). Refer to each layer's definition for more information about its
                            semantics.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis>No element can be used outside of its layer without changing
                                its usage context.</emphasis> For example, a <code>code</code>
                            element from the Block layer cannot also be used in a Phrase context.
                            This rule prevents the unintended invalidation of content models by
                            ensuring that elements from a superordinate layer cannot accidentally be
                            mixed with subordinate layers. It is valid for a module to provide
                            multiple variants of the same element, each for use in a different
                            layer, and is the correct solution for semantically identical elements
                            being needed in multiple contexts. Refer to the <link
                                xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.code.module"
                                >code module</link> in the Z39.86-AI Core Modules document that
                            accompanies this specification for an example of using multiple
                            variants. </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>Default members cannot be removed.</emphasis> Each layer
                            defines at least one default member, which is typically a semantically
                            neutral element that embodies the nature of the layer within the
                            Abstract Document Model (the Text layer varies in that it defines
                            character data as its default). Because of this special role defining
                            the nature of the layer, and by extension providing the model on which
                            all other additions to the layer must be based, these default members
                            cannot be removed. In some cases, however, a specialization of the
                            default member may be permitted to replace it (for example, a newspaper
                            profile could replace the <code>section</code> element with an
                                <code>article</code> element as the default member of the Section
                            layer if no sections were anticipated or wanted). Specialization rules
                            are defined for each layer in their implementation section and in the
                            component definition for each default member. The attribute sets do not
                            have this condition of inheritance on their default members. </para>
                    </listitem>
                </orderedlist>

                <para>It is not a requirement that all subordinate layers be utilized in the content
                    models of individual elements. A Block-layer element, for example, could allow
                    only other Block elements as children, only Phrase elements or even only
                    Text-layer character data and elements. Similarly, it could allow a mix of
                    content from any and all of those three layers. Refer to the Implementation
                    section for each layer for the specific restrictions on the allowed layer
                    content.</para>
            </section>

            <section xml:id="abstractDocumentModel_classes">
                <title>Classes</title>

                <para>Each layer in the Abstract Document Model defines a class that represents the
                    practical schematic implementation of its abstract concepts and allows for the
                    grouping of elements into complete and partial content models. In schema
                    terminology, the classes are the equivalent of a name class (RelaxNG) or named
                    group (XSD).</para>

                <para>Elements and attributes are added to the classes during module activation both
                    as individual items and as part of default content models that the classes
                    expose. The classes can consequently be viewed as aggregators and containers of
                    the layer's traits; they do not, in and of themselves, define traits,
                    however.</para>

                <para> Creating new subclasses for defining element and attribute models is
                    permitted so long as the new subclasses are consistent with the content rules
                    for their parent layer or collection. All new subclasses must be prefixed by
                    their primary class name using dot notation (for example, a restricted set of
                    Block layer elements for use including prefatory material could be named
                        <code>Block.Intro</code>). It is not permitted, however, to create new
                    classes, as each class must correspond to a layer or attribute collection in the
                    Abstract Document Model. </para>
            </section>

        </section>

        <section xml:id="abstractDocumentModel_definitions">
            <title>Definitions</title>

            <para>The following sections detail the nature and function of each component of the
                Abstract Document Model and introduce the rules and constraints inherent to them and
                that apply when adding new elements and attributes.</para>

            <para>When creating a Z39.86-AI feature, the public structures must comply with the
                membership constraints of the layer or set to which the structures are
                contributed.</para>

            <note>
                <para> All classes introduced in the following definitions are defined in the <link
                        xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.global-classes.module"
                        >global-classes module definition</link>. </para>
            </note>

            <section xml:id="abstractDocumentModel_documentFoundation">
                <title>Document foundation</title>

                <para>The root element for all Z39.86-AI documents is the <code>document</code>
                    element, which always contains the following two children:</para>

                <itemizedlist>
                    <listitem>
                        <para>a child container for document information (the <link
                                xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.head"
                                    ><code>head</code></link> element); and</para>
                    </listitem>
                    <listitem>
                        <para>a child container for the document content (the <link
                                xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.body"
                                    ><code>body</code></link> element).</para>
                    </listitem>
                </itemizedlist>

                <para> This structure cannot be altered by profile creators, although attributes may
                    be added to these three elements. Profile creators may also modify and/or extend
                    each of the child containers. (Refer to the <link
                        xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.document"
                        >component definition</link> for the <code>document</code> element for
                    complete information.) </para>

                <para> When modifying the information container, profile creators must ensure that
                    it does not allow content that must be rendered by user agents as document
                    content. The container should contain only metadata information describing the
                    document and informational matter that expands on, or describes, body content
                    (e.g., definitions of terms, expansion of abbreviations, etc.). </para>

                <para> All profiles must, however, allow multiple instances of the <link
                        xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.meta"
                            ><code>meta</code></link> element in the information container in order
                    to identify the profile a document conforms to (see <xref
                        linkend="documentsReferencingProfilesFeatures"/>) and to allow expression of
                    required metadata (see <xref linkend="documentsMetadataRequired"/>). </para>

                <para> As the document content container will typically be structured into parts,
                    chapters and sections, its default nature is to allow members of the <link
                        linkend="abstractDocumentModel_sectionLayer">Section layer</link>. The
                    container can be treated as a specialization of the <link
                        xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.section"
                            ><code>section</code></link> element for cases where the
                        <code>body</code> element will provide the only structure and directly
                    contain Block-layer content. </para>

            </section>

            <section xml:id="abstractDocumentModel_sectionLayer">
                <title>Section layer</title>

                <section xml:id="abstractDocumentModel_sectionLayerDescription">
                    <title>Description</title>

                    <para>The Section layer defines structurally-significant document
                        divisions.</para>

                    <para>Structural significance is defined as the high-level grouping of content
                        according to industry-accepted conventions for divisions, such as defined in
                        the Chicago Manual of Style <xref linkend="refCMOS"/>, and by grouping
                        according to sequentially-related or subordinate headings (real and
                        implied).</para>

                    <para>Examples include: front, body and back matter divisions, covers and other
                        document bindings and containers, and major document divisions such as
                        sections, parts and chapters.</para>
                </section>

                <section xml:id="abstractDocumentModel_sectionLayerImplementation">
                    <title>Implementation</title>

                    <para> Elements contributed to this layer are collectively referenced in a
                        profile's <code>Section</code> class. The default member is the
                            <code>section</code> element, whose <link
                            xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.section"
                            >component definition</link> specifies the traits that all elements
                        contributed to the layer must inherit. The <code>section</code> element can
                        be replaced by a specialization, so long as the specialization meets all of
                        the requirements laid out in its definition. </para>

                    <para> The <code>Section</code> class can be extended to include other elements
                        (e.g., to allow for greater specialization of document divisions), but these
                        must adhere to the following rules: </para>

                    <orderedlist>
                        <listitem>
                            <para>They must not allow more than one occurrence of a structural
                                heading in their content models. If an element contains headings
                                that are not significant to the overall structure of the document,
                                another distinct non-structural heading type must be used to cover
                                these cases.</para>
                        </listitem>
                        <listitem>
                            <para>They must either contain exclusively Block or Section layer
                                content or a mixture of the two. Phrase and Text layer content is
                                not permitted as direct descendants.</para>
                        </listitem>
                    </orderedlist>

                </section>
            </section>

            <section xml:id="abstractDocumentModel_blockLayer">
                <title>Block layer</title>

                <section xml:id="abstractDocumentModel_blockLayerDescription">
                    <title>Description</title>

                    <para>The Block layer contains structures and divisions that complement, and are
                        subordinate to, the structurally significant divisions of the Section
                        layer.</para>

                    <para>Block content differs from Section content in that it typically
                        encapsulates information for a very specific component of a document or
                        groups content for semantic or formatting reasons only.</para>

                    <para>Block content likewise differs from Phrase content in that it establishes
                        a connection between content ordered and divided vertically on a rendered
                        page.</para>

                    <para>Examples include: headings, tables, lists, figures, quotes and
                        paragraphs.</para>
                </section>

                <section xml:id="abstractDocumentModel_blockLayerImplementation">
                    <title>Implementation</title>

                    <para> Elements contributed to this layer are collectively referenced in a
                        profile's <code>Block</code> class. The default member is the
                            <code>block</code> element, whose <link
                            xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.block"
                            >component definition</link> specifies the traits that all elements
                        contributed to the layer must inherit. The <code>block</code> element can be
                        replaced by a specialization, so long as the specialization meets all of the
                        requirements laid out in its definition. </para>

                    <para> The <code>Block</code> class can be extended to include other elements,
                        but these must adhere to the following rules: </para>

                    <orderedlist>
                        <listitem>
                            <para> They must not allow structural headings within their content
                                models. Structural headings are reserved for use in Section layer
                                elements. </para>
                        </listitem>
                        <listitem>
                            <para>They must either contain exclusively Text, Phrase or Block layer
                                content or a mixture of the three.</para>
                        </listitem>
                    </orderedlist>
                </section>
            </section>

            <section xml:id="abstractDocumentModel_phraseLayer">
                <title>Phrase layer</title>

                <section xml:id="abstractDocumentModel_phraseLayerDecscription">
                    <title>Description</title>

                    <para>The Phrase layer contains grammatical and other semantically significant
                        segments that form the content of documents.</para>

                    <para>Phrase content differs from Block content in that it establishes a
                        connection between content that flows horizontally across a rendered
                        page.</para>

                    <para>Phrase content differs from Text content in that it does not define
                        character data, but operates at a grammatical level.</para>

                    <para>Examples include: sentences, terms and words.</para>
                </section>

                <section xml:id="abstractDocumentModel_phraseLayerImplementation">
                    <title>Implementation</title>

                    <para> Elements contributed to this layer are collectively referenced in a
                        profile's <code>Phrase</code> class. The default member is the
                            <code>span</code> element, whose <link
                            xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.span"
                            >component definition</link> specifies the traits that all elements
                        contributed to the layer must inherit. The <code>span</code> element can be
                        replaced by a specialization, so long as the specialization meets all of the
                        requirements laid out in its definition. </para>

                    <para> The <code>Phrase</code> class can be extended to include other elements,
                        but these must either contain exclusively Text or Phrase layer content or a
                        mixture of the two.</para>

                </section>
            </section>

            <section xml:id="abstractDocumentModel_textLayer">
                <title>Text layer</title>

                <section xml:id="abstractDocumentModel_textLayerDescription">
                    <title>Description</title>

                    <para> Although the Text layer's primary role is to define character data, it
                        can also be extended to include elements to supplement and augment the
                        available set of characters. </para>

                    <para>Text layer content differs from Phrase content in that it only represents
                        character data and formatting and does not infer any semantic information
                        about itself.</para>

                    <para>Examples include: emphasis, superscripts and subscripts.</para>
                </section>

                <section xml:id="abstractDocumentModel_textLayerImplementation">
                    <title>Implementation</title>

                    <para> Elements contributed to this layer are collectively referenced in a
                        profile's <code>Text</code> class. The Text layer is unique in that it does
                        not define an element as having default membership, but instead designates
                        character data as its default member (as defined in the Characters section
                        in <xref linkend="refXML"/>). </para>

                    <para> All elements that incorporate character data into their content models
                        should do so either by directly referencing the <code>Text</code> class or
                        by indirectly referencing it through their layer's class definition (if the
                        layer incorporates character data). Custom character data declarations are
                        permitted where required, however. </para>

                    <para>The Abstract Document Model imposes no further restrictions on the allowed
                        character content than is already defined by the Characters definition.
                        Individual profiles and features may express additional restrictions on
                        character content, but only within the scope of the elements and attributes
                        that they define.</para>

                    <para> The <code>Text</code> class can be extended to allow expressions that are
                        not supported by Unicode or that must be handled specially by processing
                        agents (for example, for braille rendering). All extensions must allow only
                        character data and other Text layer elements (refer to the <link
                            xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.char"
                                ><code>char</code></link> element for an example).</para>

                </section>
            </section>

            <section xml:id="abstractDocumentModel_metaAttributesCollection">
                <title>Metadata Attributes collection</title>

                <section xml:id="abstractDocumentModel_metaAttributesSetDescription">
                    <title>Description</title>

                    <para>The Metadata Attributes collection provides the means to annotate
                        documents and structures with meta information relating to their nature or
                        semantics.</para>

                </section>

                <section xml:id="abstractDocumentModel_metaAttributesCollectionImplementation">
                    <title>Implementation</title>

                    <para> Attributes contributed to this layer are collectively referenced in a
                        profile's <code>Meta</code> class. There are two default members of this
                        class: </para>

                    <itemizedlist>
                        <listitem>
                            <para>the <link
                                    xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#rdfa-attrib.module"
                                    >RDFa attribute set</link>; and</para>
                        </listitem>
                        <listitem>
                            <para>the <link
                                    xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.role-attrib.module"
                                    >role</link> attribute.</para>
                        </listitem>
                    </itemizedlist>

                    <para>The RDFa attributes can be used throughout documents to append
                        machine-readable RDF metadata to any element, while the <code>role</code>
                        attribute can be used to layer specific semantic information about the
                        nature of an element.</para>

                    <para> The <code>Meta</code> class can be extended to include other attributes,
                        but these must adhere to the following rules: </para>

                    <orderedlist>
                        <listitem>
                            <para>They must only attach or inflect metadata information.</para>
                        </listitem>
                        <listitem>
                            <para>They must not be used in contexts where their contents may be
                                interpreted as document content.</para>
                        </listitem>
                    </orderedlist>

                    <!-- mg: moved to features <para>Features should allow the Metadata Attributes set on the elements they
                        contribute. Any deviations from this recommendation must be explicitly
                        expressed in the feature's resource directory.</para> -->

                    <para>For more information on the use of metadata in Z39.86-AI documents refer
                        to <xref linkend="documentsMetadata"/>.</para>

                </section>
            </section>

            <section xml:id="abstractDocumentModel_globalAttributesCollection">
                <title>Global Attributes collection</title>

                <section xml:id="abstractDocumentModel_globalAttributeCollectionDescription">
                    <title>Description</title>

                    <para> The Global Attributes collection makes its member attributes available to
                        all elements in a document. The members of this set do not share a common
                        nature or purpose beyond their global applicability, however. </para>
                </section>

                <section xml:id="abstractDocumentModel_globalAttributeImplementation">
                    <title>Implementation</title>

                    <para> Attributes contributed to this layer are collectively referenced in a
                        profile's <code>Global Attributes</code> class. There are two default
                        members of this class: </para>

                    <itemizedlist>
                        <listitem>
                            <para>the XML special attributes; and</para>
                        </listitem>
                        <listitem>
                            <para>the Internationalization (i18n) attributes.</para>
                        </listitem>
                    </itemizedlist>

                    <para> The <code>Global Attributes</code> class can be extended to include other
                        attributes. There are no restrictions on the types of attributes that can be
                        added to this class, but attributes that serve metadata roles should be
                        added to the <code>Meta</code> class (see <xref
                            linkend="abstractDocumentModel_metaAttributesCollection"/>). </para>

                    <para>All elements added to the Abstract Document Model classes should include
                        the attributes defined in this layer in their attribute models.</para>

                    <!-- mg: moved to features <para> In addition, features should allow the global attributes set on the
                        elements they contribute, but the use of local equivalents where this is
                        contextually necessary to avoid naming collisions and/or redefinition of
                        existing attributes is allowed (for example, to avoid the duplication of
                        ID attributes). Any deviations from this recommendation must be explicitly
                        expressed in the feature's resource directory.</para> -->
                </section>
            </section>

        </section>
    </chapter>

    <chapter xml:id="modules">
        <title>Modules</title>

        <section xml:id="modulesIntro" conformance="informative">
            <title>Introduction</title>

            <para>Modules are the high-level building blocks of Z39.96-AI profiles and together with
                    <link linkend="features">features</link> form the basis through which new markup
                models are created. Modules may be pre-defined (as in the case of the <link
                    linkend="coreModules">core modules</link>), may be composed by profile authors
                to meet their particular structural needs, or may be made available for public use
                by interest groups.</para>

            <para>Modules, in their practical form, are schema files that define custom components —
                such as elements and attributes — for use in building profiles. The components
                within any module typically share a common nature or serve a common structural
                purpose, allowing for targeted activation of modules for specific uses. This
                approach to module definition enables element and attribute counts to be kept to a
                minimum when composing new grammars.</para>

        </section>

        <section xml:id="modulesDefinitions">
            <title>Module and component definitions</title>

            <para>Module and component definitions are informational resources that define the
                nature of a given module and the components it contains. These definitions provide
                the default state of modules and components prior to activation as well as the
                high-level instructions on their proper use. </para>

            <para> A definition must contain the module name, its dependencies as well as a
                description of its purpose. For <link linkend="coreModules">core modules</link>, the
                definitions additionally specify whether the module is required to be activated in
                all Z39.86-AI compliant profiles; this trait does not apply to custom modules and
                features, however, as they are always optional in any profile. Each component made
                available by the module must also be listed along with usage information, as
                outlined in <xref linkend="modulesComponents"/>. </para>

            <para> There are no rules on the format and structure of a definition resource. For
                example, HTML definition files could be generated from RDF metadata embedded in each
                module and component, but this approach is not required. So long as complete
                information about the nature and traits of each module and component is made
                available in human readable form, the requirement to provide a definition has been
                satisfied. </para>

            <para> Definitions must be provided for all module components that are created
                specifically for use in the Z39.86-AI Framework. Definitions for any imported
                features are recommended but are not a requirement, as the official documentation
                maintained by the authoring standard body should be referenced in all cases as the
                authoritative definition. </para>

            <para> Module and component definitions are not a reference to how to mark up a document
                to conform to a specific profile and should never be consulted for validation
                problems that arise during document creation. The normative schema available in the
                profile's resource directory is the authoritative reference to creating valid
                documents. </para>

            <para>For <link linkend="coreModules">core modules</link>, the definition are available
                in <link xlink:href="http://www.daisy.org/z3986/2010/auth/cm/"/>. For custom modules
                and features, the definitions must be referenced from the resource directory of the
                profile in which they are used. </para>

        </section>

        <section xml:id="modulesComponents">
            <title>Components</title>

            <para>A component is any single element, attribute, datatype, set of values or pattern
                defined in a module file that can be activated and used to build content models.
                Components may be usable individually or may be dependent on parental or child
                relationships also being fulfilled. Some components may also have dependencies on
                components from other modules.</para>

            <para>The module's definition includes usage information for all its components. The
                following information must be provided about each component: </para>

            <itemizedlist>
                <listitem>
                    <para>a semantic definition;</para>
                </listitem>
                <listitem>
                    <para>a default usage context;</para>
                </listitem>
                <listitem>
                    <para>a default content model;</para>
                </listitem>
                <listitem>
                    <para>a default attribute model;</para>
                </listitem>
                <listitem>
                    <para>a definition of alterability; and</para>
                </listitem>
                <listitem>
                    <para>a definition of optionality.</para>
                </listitem>
            </itemizedlist>



            <section xml:id="modulesComponentTraits_semanticDefinition">
                <title>Semantic definition</title>

                <para>The semantic definition provides a concise statement about the kinds of
                    structures or data the component is meant to represent.</para>

                <para>The semantic statement can be either very restrictive about what the component
                    can capture (as in the case of highly-specialized components like tables of
                    contents), or it can be very generic if the component defers its semantics to
                    other attributes (e.g., an element that generally identifies quoted material
                    without specifying what type of material is being quoted or the role that the
                    quoted material serves).</para>

                <para>The semantic definition must always be respected when including and using
                    components in a Z39.86-AI profile; it is not valid to use a component in a way
                    that contradicts its definition.</para>

            </section>

            <section xml:id="modulesComponentTraits_initialUsageContext">
                <title>Default usage context</title>

                <para>The default usage context identifies how the component is initially configured
                    to be used within the Abstract Document Model and/or within other
                    components:</para>

                <itemizedlist>
                    <listitem>
                        <para>if the component references classes in the Abstract Document Model,
                            then the default parent of the element or attribute is any element that
                            allows the referenced class in its content or attribute model,
                            respectively.</para>
                    </listitem>
                    <listitem>
                        <para>if the component has a single element as its parent, then the
                            referenced element is the default parent of the element or
                            attribute.</para>
                    </listitem>
                </itemizedlist>

                <para>Elements and attributes have an alterable usage context unless the default
                    context is explicitly declared to be fixed. When altering a usage context,
                    elements must not be moved across layer boundaries in the Abstract Document
                    Model.</para>

                <para>The default usage context must be declared using prose and/or expressions in
                        <link linkend="refRNC">RNC</link> syntax in the module's definition.</para>
            </section>


            <section xml:id="modulesComponentTraits_initialContentModel">
                <title>Default content model</title>

                <para>Each element and attribute in a module must declare an default content model
                    or datatype that specifies its allowed content or value(s):</para>

                <itemizedlist>
                    <listitem>
                        <para>in the case of elements, the default content model is a set of
                            references to classes, elements and/or datatype declarations.</para>
                    </listitem>
                    <listitem>
                        <para>in the case of attributes, a datatype must be specified, which may
                            reference other datatype declarations and/or enumerated literal values
                            to set the initially-allowed value(s).</para>
                    </listitem>
                </itemizedlist>

                <para>Every element or attribute has an alterable content model unless it is
                    explicitly declared to be fixed. Declarations of fixed content models may apply
                    to the content model as a whole, or to individual components of it.</para>

                <para>The default content model must be declared using prose and/or expressions in
                        <link linkend="refRNC">RNC</link> syntax in the module's definition. </para>
            </section>


            <section xml:id="modulesComponentTraits_initialAttributeModel">
                <title>Default attribute model</title>

                <para>In addition to their default content model, elements must additionally declare
                    an attribute model that specifies a set of references to attribute classes or
                    individual attribute declarations that constitute its default set of allowed
                    attributes.</para>

                <para>Every element has an alterable attribute model unless it is explicitly
                    declared to be fixed. Declarations of fixed attribute models may apply to the
                    attribute model as a whole, or to individual attributes within it.</para>

                <para>All elements should allow the <link
                        linkend="abstractDocumentModel_globalAttributesCollection">Global Attributes
                        collection</link> by default.</para>

                <para>The default attribute model must be declared using prose and/or expressions in
                        <link linkend="refRNC">RNC</link> syntax in the module's definition. </para>
            </section>


            <section xml:id="modulesComponentTraits_alterability">
                <title>Definition of alterability</title>

                <para>Each component specifies, directly or indirectly, whether its default content
                    model, attribute model and context are open to alteration when its containing
                    module is activated. The semantic definition and rules of alterability and
                    optionality are fixed and cannot be changed, however.</para>

                <para>Alterations to the default content and attribute models can be made to either
                    restrict or loosen their allowed content/values. Complete rewrites of these
                    initial states may also be permissible.</para>

                <para>The default usage context can likewise be restricted, loosened or rewritten to
                    change the way that the component can be used by other components and within
                    layers of the Abstract Document Model.</para>

                <para>Alteration of a component's traits is allowed by default, but no alterations
                    are permitted that would cause the nature of the element to conflict with its
                    semantic definition. The component's definition must explicitly express any
                    restrictions to this rule.</para>
            </section>


            <section xml:id="modulesComponentTraits_optionality">
                <title>Definition of optionality</title>

                <para>As modules may contain more components than are needed in the Z39.86-AI
                    profile into which they are activated, any of their components may be specified
                    as optional to prevent unnecessary imports.</para>

                <para>A component cannot be excluded if another included component requires it as a
                    dependency.</para>

                <para> By default, all components are optional; if a component is mandatory, this
                    must be explicitly stated in the component's definition. </para>
            </section>

        </section>

        <section xml:id="modulesExpression">
            <title>Expression</title>

            <para> A module is formally expressed using one or more normative schemas authored in
                any of the languages specified in <xref linkend="schemas"/>. </para>

        </section>

        <section xml:id="moduleActivation">
            <title>Activation</title>

            <para>Activation of a module is the process of importing it into a Z39.86-AI profile and
                including its components in content models and class definitions. In practice, the
                process involves including the module into a profile driver file, importing all
                required and needed components and making any alterations necessary to tailor the
                components to the requirements of the document type being built.</para>

            <note>
                <para> The actual process of including a module is schema-language dependent. This
                    sections outline the general steps, which are the same across all languages.
                </para>
            </note>

            <para>The first step in activating a module is to import the module into a profile
                driver file. If the module lists other modules as dependencies, those modules will
                also need to be imported, including any of their dependencies, and similarly on down
                the import chain. Each dependency only needs to be imported once. </para>

            <para>Modules may have both hard dependencies, where failing to import a dependent
                module will result in a schema error, and soft dependencies, where no errors are
                reported. Omitting a soft dependency, while not resulting in an error in the schema
                file, still results in an invalid Z39.86-AI profile. </para>

            <para> Importing a module may, in some cases, be the only step necessary, typically if
                the module is fixed and cannot be altered or if all of its components are to be used
                in their default state. In practice, however, the next step in the activation
                process involves assessing the following considerations for each component in the
                module: </para>

            <orderedlist>
                <listitem>
                    <para>determining the need for the component; unnecessary components should be
                        removed if allowed by their optionality trait;</para>
                </listitem>
                <listitem>
                    <para>determining whether the default content model and/or attribute models
                        adequately reflect the needs of the profile being built, and customizing the
                        model if alterations are permitted.</para>
                </listitem>
                <listitem>
                    <para>determining whether the default usage context is appropriate for the
                        profile being built, and modifying where the component can be used if
                        alterations are permitted. In the case where the component is needed in
                        another layer of the Abstract Document Model, this step would involve
                        creating a new variant. </para>
                </listitem>
            </orderedlist>

            <para> The activation process must be carried out for all required modules, optional
                modules and features needed to fully create a new Z39.86-AI profile, but the modules
                and features activated do not alone determine the uniqueness of a new profile. The
                actual distinction between profiles is determined by variations across all of the
                following key factors:</para>

            <itemizedlist>
                <listitem>
                    <para>which modules have been activated</para>
                </listitem>
                <listitem>
                    <para>the number of alterations made to the components of the activated
                        modules</para>
                </listitem>
                <listitem>
                    <para>the number of new elements (specializations) introduced</para>
                </listitem>
                <listitem>
                    <para>which features are defined as supported by the profile</para>
                </listitem>
            </itemizedlist>
        </section>

        <section xml:id="coreModules">
            <title>Core modules</title>

            <para>The core modules are a collection of modules defined as part of this specification
                that provide a common base of components for use in all profiles, thereby ensuring a
                level of structural consistency across profiles.</para>

            <para>The modules are grouped so that each contains a single set of semantically and/or
                structurally related elements and attributes that have been identified as having
                general applicability across a wide variety of document types. Where an element or
                attribute already exists in a core module, profile creators are encouraged to use
                the existing construct, or a specialization of it, rather than to create another
                that is only distinguishable by name.</para>

            <para>A definition for each module is included in the <link
                    xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#coreModuleDefinitions"
                    >Z39.86-AI Core Modules</link> document that accompanies this specification. </para>

            <para> Profile creators are advised not to point to the publicly available versions of
                these modules from their profiles. Local copies of the modules should always be used
                to ensure the stability of any new profile. </para>

            <section xml:id="uriCoreNamespace">
                <title>Core namespace URI</title>

                <para xml:id="coreNamespace" xreflabel="Z39.86-AI Core namespace URI">The Z39.86-AI
                    Core namespace URI is
                    <code>http://www.daisy.org/ns/z3986/authoring/</code>.</para>

                <para>This is the default namespace URI of all elements defined in the core
                    modules.</para>
            </section>

            <section xml:id="uriCoreModules" xreflabel="core modules canonical URI">
                <title>Core modules URI</title>

                <para>The canonical URI of the Z39.86-AI core modules is <link
                        xlink:href="http://www.daisy.org/z3986/2010/auth/cm/"
                        >http://www.daisy.org/z3986/2010/auth/cm/</link>.</para>

                <para>At this URI, definitions of all core modules are available in their latest
                    version (see <link
                        xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#coreModuleVersioning"
                    />).</para>
            </section>

        </section>

    </chapter>

    <chapter xml:id="profiles">
        <title>Profiles</title>

        <section xml:id="profilesIntro" conformance="informative">
            <title>Introduction</title>

            <para>Where the <link linkend="abstractDocumentModel">Abstract Document Model</link>
                defines Z39.86-AI document structure at a conceptual level and, coupled with the
                    <link linkend="coreModules">core modules</link>, provides a common framework of
                composition rules and abstract building blocks, profiles define the practical markup
                models suitable for describing information resources. Examples of the types of
                resources that can be defined using the Framework include: </para>

            <itemizedlist>
                <listitem>
                    <para>general print books of all kinds (fiction and nonfiction)</para>
                </listitem>
                <listitem>
                    <para>student textbooks and learning materials</para>
                </listitem>
                <listitem>
                    <para>poetry</para>
                </listitem>
                <listitem>
                    <para>plays</para>
                </listitem>
                <listitem>
                    <para>newspapers</para>
                </listitem>
                <listitem>
                    <para>periodicals</para>
                </listitem>
                <listitem>
                    <para>bills and invoices</para>
                </listitem>
                <listitem>
                    <para>catalogs</para>
                </listitem>
                <listitem>
                    <para>consumer medical information</para>
                </listitem>
            </itemizedlist>

            <para> This specification does not attempt to define the scope of profiles: a profile
                can have a wide scope (such as a general book profile) or it can have a narrow scope
                (such as a consumer medical information profile) depending on its intended use.
                Profiles must, however, meet the criteria given in <xref
                    linkend="profileConformance"/> in order to conform to this specification. </para>

            <para> The creation of a profile starts with the activation of modules and features,
                which includes their components into the broader markup model defined by the
                profile. All profiles must initially include the <link
                    xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.document.module"
                    >document module</link> into their driver file (the root schema file that is
                referenced by validators). This module establishes the root <code>document</code>
                element common across all profiles. The <link
                    xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.global-classes.module"
                    >global-classes module</link>, itself a dependency of the document module, must
                then be imported to establish the Abstract Document Model classes into which all
                other module and feature components will be added. This process of dependency and
                required component inclusion continues until a complete markup model is established. </para>

            <note>
                <para> The schema files that define modules and features are never directly modified
                    during this process, but as they are included into the profile driver file their
                    default traits can be modified as necessary to fit the specific nature required
                    by the profile. </para>
            </note>

            <para> Profiles are not solely defined by their normative schemas, however. Although the
                profile's schema is the primary reference point for validation, a profile may
                additionally include prose restrictions and requirements outside the scope of a
                schema. They may also employ RDF vocabularies that control the values that can be
                used for metadata attributes. </para>

            <para> When all the aspects of a profile have been finalized and it is ready for use,
                the schema files, RDF vocabularies, documentation and other associated resources are
                compiled together into a resource directory. The profile can then be made available
                through the publication of a resource directory document at the schema's identity
                URI (see <xref linkend="profileConformanceIdentityURI"/> and <xref
                    linkend="resourcedirectory"/>). </para>

            <para> The Z39.86 Advisory Committee is maintaining a set of profiles that conform to
                this specification. References to these profiles can be found in <xref
                    linkend="profileCatalog"/>. While the intent is that this profile catalog will
                be extended over time, the profiles listed in the catalog are not an exclusive set;
                other agencies can create profiles and, if desired, make those available
                independently for public use.</para>

        </section>

        <section xml:id="profileConformance">
            <title>Profile conformance definition</title>

            <section xml:id="profileConformanceIdentityURI">
                <title>Profile identity URI</title>
                <para> Each profile must define an identity URI that serves as its unique
                    identifier. The URI must conform to the definition of identity URIs in <xref
                        linkend="uriIdentity"/>, where the <code>static</code> segment used must be
                        <code>/z3986/2010/auth/profiles/</code>. </para>
                <para>An example profile identity URI is:
                        <code>http://www.example.org/z3986/2010/auth/profiles/myProfile/1.0/</code>
                </para>
                <para>For information on how a Profile Identity URI is expressed in Z39.86-AI
                    documents, see <xref linkend="documentsReferencingProfilesFeatures"/>.</para>
            </section>

            <section xml:id="profileConformanceMarkupModel">
                <title>Profile markup model definition</title>

                <para> Each profile must define exactly one markup model, which must meet all of the
                    following criteria:</para>

                <itemizedlist>
                    <listitem xml:id="profileConformanceMarkupModelSchema">
                        <para>The grammatical constraints of the markup model must be expressed
                            formally using at least one schema, identified in the <link
                                linkend="profileConformanceResourceDirectory">profile's resource
                                directory</link> as normative and written in one of the languages
                            identified in <xref linkend="schemas"/>.</para>
                        <para>Grammatical constraints that cannot be expressed using schema syntax
                            must be defined using prose in the designated area of the profiles
                            resource directory.</para>
                    </listitem>
                    <listitem xml:id="profileConformanceMarkupModelADM">
                        <para>The schema identified as normative must adhere to the Abstract
                            Document Model constraints defined in <xref
                                linkend="abstractDocumentModel_constraints"/> and in each
                            Implementation section in <xref
                                linkend="abstractDocumentModel_definitions"/>.</para>
                    </listitem>
                    <listitem xml:id="profileConformanceMarkupModelFeatures">
                        <para>If the profile supports one or several <link linkend="features"
                                >features</link>, then the profile's normative schema must include
                            the activated normative <link
                                linkend="featureConformanceMarkupModelSchema">schema fragment(s)
                                defined by these features</link>. </para>
                        <para>The activation of a feature's schema fragment must be done without
                            violating the feature's <link
                                linkend="featureConformanceMarkupModelPublicComponents">public
                                structures</link> expression.</para>
                        <para>Profiles must not modify the grammatical constraints expressed by the
                            feature's schema fragment(s) except where allowed by the feature's
                            normative specification.</para>
                    </listitem>
                    <listitem xml:id="profileConformanceMarkupModelMeta">
                        <para> The grammatical constraints of the markup model must allow the
                            expression of required metadata as defined in <xref
                                linkend="documentsMetadataRequired"/>. </para>
                    </listitem>
                    <listitem xml:id="profileConformanceMarkupModelIdentity">
                        <para> The grammatical constraints of the markup model must allow the
                            identification of the profile to which the markup model conforms as well
                            as any features in use, as defined in <xref
                                linkend="documentsReferencingProfilesFeatures"/>. </para>
                    </listitem>
                    <listitem xml:id="profileConformanceMarkupModelRDFaAssoc">
                        <para> The grammatical constraints of the markup model must allow the
                            expression of RDF vocabulary associations defined in <xref
                                linkend="rdfAssociatingVocab"/>. </para>
                    </listitem>

                    <listitem xml:id="profileConformanceMarkupModelNames">
                        <para> All elements included in the profiles markup model must be bound to
                            an <link linkend="refXMLNamespaces">XML namespace</link>. </para>
                    </listitem>

                </itemizedlist>

            </section>

            <section xml:id="profileConformanceResourceDirectory">
                <title>Profile resource directory</title>
                <!-- NOTE: #resourcedirectoryReq should only list general reqs, this section adds the profile specific RD reqs, same for features -->

                <para> The <link linkend="profileConformanceIdentityURI">identity URI</link> must
                    resolve to a <link linkend="resourcedirectory">resource directory</link> that
                    meets all of the general criteria defined in <xref
                        linkend="resourcedirectoryConformance"/>. In addition, the profile's
                    resource directory must meet all of the following criteria:</para>

                <itemizedlist>
                    <listitem>
                        <para>The <link linkend="profileConformanceMarkupModelSchema">normative
                                schema(s)</link> must be identified using the <link
                                xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#normative-schema"
                                >normative-schema</link> term.</para>
                        <para>Any additional grammatical restrictions expressed in prose must be
                            identified using the <link
                                xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#normative-prose"
                                >normative-prose</link> term.</para>
                    </listitem>
                    <listitem>
                        <para>If the profile defines a <link linkend="rdfAssociatingVocab">default
                                RDF vocabulary</link>, then the URI of this vocabulary must be
                            identified using the <link
                                xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#default-vocabulary"
                                >default-vocabulary</link> term.</para>
                    </listitem>
                    <listitem>
                        <para>Features supported by the profile must be identified using the <link
                                xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#z3986-feature"
                                >z3986-feature</link> property. (Note that feature version
                            information is available implicitly through the normative schemas of the
                            given version of the profile.)</para>
                    </listitem>
                </itemizedlist>

            </section>

        </section>

    </chapter>

    <chapter xml:id="features">
        <title>Features</title>

        <section xml:id="featuresIntro" conformance="informative">
            <title>Introduction</title>

            <para>Certain kinds of content structures have highly specialized requirements for
                representation and processing, but have limited scope within information
                resources. A typical example is mathematical equations, where there already exists a
                specialized markup to represent equations (MathML). Z39.86-AI
                    <emphasis>features</emphasis> are designed to handle these kinds of
                structures.</para>

            <para> Features have much in common with profiles: each feature defines a markup model
                and has a unique URI associated with it which serves as its identifier, and which
                resolves to a unique <link linkend="resourcedirectory">resource directory</link>.
                Features are more specialized, however, and narrower in scope: they are not intended
                to be used as complete markup languages on their own. In the Z39.86-AI framework,
                features can be thought of as optional "add-ons" to profiles. </para>

            <para>Features share their self-contained grammars in common with profiles, but like
                modules are more specialized and narrower in the scope of what they define. Each
                feature also has a unique URI associated with it, which serves as its identifier and
                which resolves to a unique .</para>

            <para>Features are not intended to be used as complete markup languages on their own: in
                the Z39.86-AI Framework, features can be thought of as optional "add-ons" to
                profiles. Profiles explicitly declare which (if any) features they support. If a
                profile does support a feature, it becomes a "host" of this feature, and
                the profile's normative schema includes the schema fragment defined by the
                feature.</para>

            <para>Features typically only expose a small set of elements and attributes for
                reference within the content models defined by profiles. These <emphasis>public
                    components</emphasis> are defined by the feature in its associated normative
                prose in order to ensure consistency of usage across Z39.86-AI profiles. The
                predictability of features further allows processing agents to support them
                independently of the profiles that might reference them. <remark role="todo">TODO
                        <link xlink:href="http://code.google.com/p/zednext/issues/detail?id=130"
                        >Issue 130</link></remark></para>

        </section>

        <section xml:id="featureConformance">
            <title>Feature conformance definition</title>

            <section xml:id="featureConformanceIdentityURI">
                <title>Feature identity URI</title>
                <para> Each feature must define an identity URI that serves as its unique
                    identifier. The URI must conform to the definition of identity URIs in <xref
                        linkend="uriIdentity"/>, where the <code>static</code> segment used must be
                        <code>/z3986/2010/auth/features/</code>. </para>
                <para>An example feature identity URI is:
                        <code>http://www.example.org/z3986/2010/auth/features/myFeature/1.0/</code>
                </para>

                <para>For information on how Feature Identity URIs are expressed in Z39.86-AI
                    documents, see <xref linkend="documentsReferencingProfilesFeatures"/>.</para>
            </section>

            <section xml:id="featureConformanceMarkupModel">
                <title>Feature markup model definition</title>

                <para> Each feature must define exactly one markup model fragment, which must meet
                    all of the following criteria:</para>

                <itemizedlist>
                    <listitem xml:id="featureConformanceMarkupModelSchema">
                        <para>The grammatical constraints of the markup model fragment must be
                            expressed formally using at least one schema fragment, identified in the
                                <link linkend="featureConformanceResourceDirectory">feature's
                                resource directory</link> as normative and written in one of the
                            languages identified in <xref linkend="schemas"/>.</para>
                        <para>Grammatical constraints that cannot be expressed using schema syntax
                            must be defined using prose in the designated area of the feature's
                            resource directory.</para>
                    </listitem>
                    <listitem>
                        <para>A feature's schema fragment(s) must not include contributions that
                            subset or reduce the host profile's markup model. Features must only
                                <emphasis>extend</emphasis> the host markup model.</para>
                    </listitem>
                    <listitem>
                        <para>All elements contributed to the markup model must be bound to an
                                <citation linkend="refXMLNamespaces">XML
                            namespace</citation>. </para>
                        <para>The namespace of elements and attributes defined by a feature must not
                            be the <xref linkend="coreNamespace"/>. Note however that a feature may
                            reuse elements in the Z39.86-AI Core namespace in internal content
                            models.</para>
                    </listitem>
                    <listitem>
                        <para>Features should allow the <link
                                linkend="abstractDocumentModel_metaAttributesCollection">Metadata
                                Attributes collection</link> on the elements they  contribute. Any
                            deviations from this recommendation must be explicitly  expressed in the
                            feature's resource directory.</para>
                    </listitem>
                    <listitem>
                        <para> Features should allow the <link
                                linkend="abstractDocumentModel_globalAttributesCollection">Global
                                Attributes collection</link> on the  elements they contribute, but
                            the use of local equivalents where this is  contextually necessary to
                            avoid naming collisions and/or redefinition of  existing attributes is
                            allowed (for example, to avoid the duplication of  ID attributes). Any
                            deviations from this recommendation must be explicitly  expressed in the
                            feature's resource directory.</para>
                    </listitem>
                    <listitem xml:id="featureConformanceMarkupModelPublicComponents">
                        <para>Features must identify which components within its markup model
                            fragment are to be considered <emphasis>public components</emphasis>.
                            Public components are the only elements, attributes, values or datatypes
                            that may be referenced directly by a profile in its markup model. (See
                                <xref linkend="featureConformanceResourceDirectory"/>).</para>
                    </listitem>
                </itemizedlist>
            </section>

            <section xml:id="featureConformanceResourceDirectory">
                <title>Feature resource directory</title>
                <!-- NOTE: #resourcedirectoryReq should only list general reqs, this section adds the feature specific RD reqs, same for profiles -->

                <para> The <link linkend="featureConformanceIdentityURI">identity URI</link> must
                    resolve to a <link linkend="resourcedirectory">resource directory</link> that
                    meets all of the general criteria defined in <xref
                        linkend="resourcedirectoryConformance"/>. In addition, the feature's
                    resource directory must meet all of the following criteria:</para>

                <itemizedlist>
                    <listitem>
                        <para>The <link linkend="featureConformanceMarkupModelSchema">normative
                                schema fragments(s)</link> must be identified using the <link
                                xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#normative-schema"
                                >normative-schema</link> term.</para>
                        <para>Any additional grammatical restrictions expressed in prose must be
                            identified using the <link
                                xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#normative-prose"
                                >normative-prose</link> term.</para>
                    </listitem>
                    <listitem xml:id="featureConformanceResourceDirectoryPublicComponents">
                        <para>The identification of <link
                                linkend="featureConformanceMarkupModelPublicComponents">public
                                components</link> must be made in normative prose available through
                            feature's resource directory.</para>
                    </listitem>
                    <listitem>
                        <para>If the feature defines processing agent behaviors that modifies the
                            default behavior with regards to <link
                                linkend="processingAgentConformanceInitializationBehavior"
                                >initialization</link>, then those behaviors must be detailed in
                            normative prose in the resource directory. </para>
                    </listitem>
                    <listitem>
                        <para>As the ability to <link linkend="rdfAssociatingVocab">declare default
                                RDF vocabularies</link> is reserved for use by profiles, the <link
                                xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#default-vocabulary"
                                >default-vocabulary</link> term must not occur in feature resource
                            directories.</para>
                    </listitem>
                    <listitem xml:id="featureConformanceMarkupModelAbsDef">
                        <para>The components contributed by the feature should include <link
                                linkend="modulesDefinitions">component definitions</link>, available
                            through the feature's resource directory.</para>
                    </listitem>
                </itemizedlist>

            </section>

        </section>

    </chapter>

    <chapter xml:id="documents">
        <title>Documents</title>

        <section xml:id="documentsIntro" conformance="informative">
            <title>Introduction</title>

            <para> The purpose of authoring Z39.86-AI profiles is ultimately to allow the creation
                of documents that represent information resources. A Z39.86-AI document is a
                well-formed XML document that conforms to all the normative constraints defined by a
                profile and possibly included features.</para>

            <para> While Z39.86-AI documents may exist as single XML files and reference no
                additional local or remote resources, a complete Z39.86-AI document set typically
                will include local resources (such as included XML fragments, images, stylesheets
                and metadata records), as well as reference remote resources that can be obtained by
                their protocol (web-hosted resources available over HTTP or FTP, for example). To
                simplify the distribution of documents, the Z39.86-AI Framework consequently also
                defines a <link linkend="container">container format specification</link> for the
                bundling of local resources with their associated Z39.86-AI document. </para>

        </section>

        <section xml:id="documentsConformanceDefinition"
            xreflabel="Document
            conformance definition">
            <title>Document conformance definition</title>
            <para>In order to be conformant, a Z39.86-AI document must meet all of the following
                criteria:</para>

            <itemizedlist>
                <listitem>
                    <para>It must be a well-formed XML Document as defined by <xref linkend="refXML"
                        />. </para>
                </listitem>
                <listitem>
                    <para>It must be namespace well-formed as defined by <xref
                            linkend="refXMLNamespaces"/>.</para>
                </listitem>
                <listitem>
                    <para>It must constitute a single XML Infoset as defined in <xref
                            linkend="refXMLInfoset"/>.</para>
                </listitem>
                <listitem>
                    <para>The start tag of the root element of the document must explicitly contain
                        a <xref linkend="refXMLNamespaces"/>) compliant declaration for the
                        Z39.86-AI Core namespace, as defined in <xref linkend="coreNamespace"/>.
                    </para>
                </listitem>
                <listitem>
                    <para>It must include a reference to exactly one conforming profile, using the
                        mechanism defined in <xref linkend="documentsReferencingProfilesFeatures"
                        />.</para>
                </listitem>
                <listitem>
                    <para>If it includes markup contributed by any of the features supported by the
                        referenced profile, it must include a reference to those features used and
                        only to those used using the mechanism defined in <xref
                            linkend="documentsReferencingProfilesFeatures"/>.</para>
                </listitem>
                <listitem>
                    <para>It must be valid to the normative schema(s) of the referenced
                        profile.</para>
                </listitem>
                <listitem>
                    <para>It must conform to any normative prose expressed (see <xref
                            linkend="resourcedirectoryConformance"/>) in the resource directories of
                        the referenced profile and feature(s).</para>
                </listitem>
                <listitem>
                    <para>It must contain metadata that meets all the requirements of <xref
                            linkend="documentsMetadataRequired"/>. </para>
                </listitem>
                <listitem>
                    <para>It must perform RDF vocabulary association as defined in <xref
                            linkend="rdfAssociatingVocab"/>. <remark role="todo">REMARK How RDF
                            properties are bound may change as a result of <link
                                xlink:href="http://code.google.com/p/zednext/issues/detail?id=107"
                                >Issue 107</link></remark></para>
                </listitem>
                <listitem>
                    <para>If it references CSS Stylesheets, then it should do so using the syntax
                        defined in <xref linkend="refXMLStylesheet"/>.</para>
                </listitem>
            </itemizedlist>


        </section>

        <section xml:id="documentsReferencingProfilesFeatures">
            <title>Referencing profiles and features</title>

            <para> Documents must reference the profile to which they adhere via the <link
                    xlink:href="http://www.daisy.org/z3986/2010/auth/cm/#z3986.meta">meta</link>
                element in the metadata container element (see <xref
                    linkend="abstractDocumentModel_documentFoundation"/>). The profile's identity
                URI must be given in the <code>resource</code> attribute. The value of the
                    <code>rel</code> attribute must contain the term <code>profile</code>, as
                defined in the <link linkend="rdfPredefinedVocabsDecl">Z39.86-2010 Instance Metadata
                    Vocabulary</link>. </para>

            <para>Features that are actually used in the document must also be referenced via the
                    <code>meta</code> element in the metadata container element. In referencing
                features, the <code>rel</code> attribute must contain the term <code>feature</code>
                as defined in the <link linkend="rdfPredefinedVocabsDecl">Z39.86-2010 Instance
                    Metadata Vocabulary</link>. </para>


            <para> The following is an example of a compliant profile and feature reference in the
                    <code>head</code> element of a Z39.86-AI document. <remark role="todo">REMARK
                    the use of inline xmlns to bind prefixes will change to a simplified
                    externalized approach via RDFa 1.1. See <link
                        xlink:href="http://code.google.com/p/zednext/issues/detail?id=107">Issue
                        107</link></remark></para>

            <example conformance="informative">
                <title>Referencing a profile and features from a Z39.86-AI document
                    (informative)</title>
                <programlisting xml:space="preserve"><?example id='ai-head-profile-and-feature-decl'?></programlisting>
            </example>

            <para>Note that in the above example, the feature reference <code>meta</code> elements
                are nested within the profile reference <code>meta</code> element. This is not a
                conformance criterion. The order in which the references appear, and whether or not
                they are nested within each other, is insignificant.</para>

        </section>

        <section xml:id="documentsMetadata">
            <title>Metadata</title>

            <section xml:id="documentsMetadataIntroduction" conformance="informative">
                <title>Introduction</title>

                <para> Access to comprehensive metadata is critical to producers, distributors, and
                    consumers of books and other digital resources. Fulfilling this need is
                    complicated, however, by the wide variety of standards and applications of
                    metadata. In response, the Z39.86-AI Framework has been created with an open
                    approach to specifying and attaching information resources: </para>

                <itemizedlist>
                    <listitem>
                        <para> it allows producers to reference multiple information resources,
                            conforming to different standards, as their internal and external needs
                            require, dropping the rigidity of embedded metadata; </para>
                    </listitem>
                    <listitem>
                        <para> it fully embraces the RDF metadata standard and the <code>role</code>
                            attribute for attaching machine-readable and grammar-definable metadata,
                            ensuring that metadata has first-class standing within the Framework and
                            can be easily attached where needed and as needed; and </para>
                    </listitem>
                    <listitem>
                        <para> it incorporates metadata elements and attributes that allow for
                            self-documentation of Framework components, simplifying the process of
                            creating and publishing new profiles. </para>
                    </listitem>
                </itemizedlist>

                <para> The rationale for referencing document metadata resources instead of
                    embedding is two-fold. First, it allows the variety needed to meet the
                    real-world production needs of producers. Second, using the Z39.86-AI document
                    itself as the source of metadata is not an intuitively sound design principle:
                    information retrieval, processing and sharing are all greatly enhanced when
                    metadata information remains distinct from the object it describes. </para>

                <para> The move to standardized metadata attributes brings the specification in line
                    with current best practices for attaching metadata. It also brings a measure of
                    consistency to metadata by allowing controlled vocabularies to be defined (i.e.,
                    semantics are not purely at the discretion of producers). </para>

                <para> There is no imperative that the complete document metadata actually appear in
                    the document itself, so long as the document can be unambiguously identified and
                    include information on how to obtain additional metadata. With that information,
                    a processing agent can get whatever other information might be
                    necessary&#8212;if any&#8212;to complete its work. </para>

                <para> The metadata requirements for a Z39.86-AI document serve two purposes: <orderedlist>
                        <listitem>
                            <para>to uniquely identify the document and its publisher; and</para>
                        </listitem>
                        <listitem>
                            <para>to provide references to one or more resources that provide more
                                detailed metadata</para>
                        </listitem>
                    </orderedlist> Z39.86-AI documents use mandated Dublin Core metadata to identify
                    the document and its publisher. Additional <!--External--> metadata is
                    referenced by URI using constructs defined by an RDF vocabulary. The method of
                    linking to metadata encompasses strategies as simple as a self-reference to the
                    document itself (if the producer chooses to include metadata within the
                    document), or as complex as URIs to web services that allow the querying of
                    producer databases directly. Multiple complementary metadata may be referenced,
                    allowing for different metadata standards to be used by different kinds of
                    systems. </para>

            </section>

            <section xml:id="documentsMetadataRequired">
                <title>Required document-level metadata</title>

                <para>Every conforming Z39.86-AI document must include a minimal set of metadata,
                    defined below, that uniquely identify the document and its publisher. Metadata
                    is referenced using the <code>meta</code> element within the <code>head</code>
                    element of the document. Metadata items are given as name-value pairs. The
                        <code>property</code> attribute is used to identify the name of the metadata
                    item and the <code>content</code> attribute, or alternatively <code>meta</code>
                    element content, contains the actual metadata item value.</para>

                <para>The metadata names used are taken from the Dublin Core Metadata Initiative
                        (<xref linkend="refDC"/>) vocabulary. Therefore, all <code>property</code>
                    attribute values must reference properties in the <xref linkend="refDC"/>
                    vocabulary (<code>http://purl.org/dc/terms/</code>).</para>

                <para>Every conforming Z39.86-AI document must contain the following three metadata
                    items: <variablelist>
                        <varlistentry>
                            <term>
                                <code>identifier</code>
                            </term>
                            <listitem>
                                <para>A string that uniquely identifies the document as created by
                                    the document producer. Note that, in the case of a republisher,
                                    this identifier should <emphasis>not</emphasis> refer to the
                                    document source (e.g., a print book that is being republished as
                                    a digital talking book).</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <code>publisher</code>
                            </term>
                            <listitem>
                                <para>The name of the publisher of this document.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <code>date</code>
                            </term>
                            <listitem>
                                <para>The date this document was created or last edited. For the
                                    purposes of Z39.86-AI documents, this value also serves as a
                                    version identifier. Per <xref linkend="refDC"/>, this value must
                                    be in W3C dateTime format.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
            </section>

            <section xml:id="documentsMetadataExternal">
                <title>Document-level metadata resources</title>

                <para> Z39.86-AI documents may refer to any number of <!-- external --> metadata
                    resources. These may include files (either local or remote), web services, or
                    any other resource that can be referenced by a URI (including the Z39.86-AI
                    document itself). </para>

                <para>Metadata resources are identified using <code>meta</code> elements within the
                    document <code>head</code> with the following required attributes: <variablelist>
                        <varlistentry>
                            <term>
                                <code>rel</code>
                            </term>
                            <listitem>
                                <para>Must refer to the <code>meta-record</code> term in the <xref
                                        linkend="rdfPredefinedVocabsDecl"/>.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <code>resource</code>
                            </term>
                            <listitem>
                                <para>Must be a valid, resolving URI that points to the metadata
                                    resource.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>

                <para>Each metadata resource identified in the document must also have its type
                    identified. This is done using an additional <code>meta</code> element with the
                    following mandatory attributes: <variablelist>
                        <varlistentry>
                            <term>
                                <code>property</code>
                            </term>
                            <listitem>
                                <para>Must refer to the <code>meta-record-type</code> term in the
                                        <xref linkend="rdfPredefinedVocabsDecl"/>.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <code>about</code>
                            </term>
                            <listitem>
                                <para>Must be the URI of the external metadata resource.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <code>content</code>
                            </term>
                            <listitem>
                                <para>Must refer to one of the terms in the <xref
                                        linkend="rdfPredefinedVocabsDecl"/> that refer to metadata
                                    standards.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>

                <para> In addition, the specific version of the metadata type may be identified
                    using a <code>meta</code> element with the following required attributes: <variablelist>
                        <varlistentry>
                            <term>
                                <code>property</code>
                            </term>
                            <listitem>
                                <para>Must refer to the <code>meta-record-version</code> term in the
                                        <xref linkend="rdfPredefinedVocabsDecl"/>.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <code>about</code>
                            </term>
                            <listitem>
                                <para>Must be the URI of the external metadata resource.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <code>content</code>
                            </term>
                            <listitem>
                                <para>Must be a string identifying the metadata standard
                                    version.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>

                <para>The following is an example of the metadata in the <code>head</code> element
                    of a Z39.86-AI document.</para>

                <example conformance="informative">
                    <title>Z39.86-AI document metadata (informative)</title>
                    <programlisting><?example id='ai-head-metadata' ?></programlisting>
                </example>

                <para>Note that the use of nested <code>meta</code> elements for external metadata
                    resource references is not a conformance criterion. The order in which the
                    references appear, and whether or not they are nested within each other, is
                    insignificant.</para>
            </section>

            <section xml:id="documentsMetadataInline" conformance="informative">
                <title>Inline metadata</title>

                <para>Metadata can also be expressed inline (i.e. on elements in the document
                        <code>body</code>) using the RDFa attributes available in the <link
                        linkend="abstractDocumentModel_metaAttributesCollection">Metadata Attributes
                        collection</link>. This mechanism for specifying metadata can either be used
                    to provide document-level metadata as outlined in <xref
                        linkend="documentsMetadata"/>, or to provide metadata for document
                    fragments.</para>

                <para>This specification does not mandate the use of any specific RDF vocabulary for
                    inlining metadata information, but relies on the vocabulary association
                    mechanism defined in <xref linkend="rdfAssociatingVocab"/>.</para>

                <para>The following is an example of the use of inline metadata in the body of a
                    Z39.86-AI document. The example makes use of the publicly available Dublin Core
                    RDF metadata properties.</para>

                <example conformance="informative">
                    <title>Inline metadata (informative)</title>
                    <programlisting><?example id='ai-metadata-inline'?></programlisting>
                </example>
            </section>

        </section>

        <!-- mg: this is replaced by a conformance req on xinclide for PAs
        <section xml:id="documentsXinclude" conformance="informative">
            <title>Representing Z39.86-AI documents using multiple files</title>
            <para> Logically, a Z39.86-AI document is a single XML Infoset as defined in <xref
                    linkend="refXMLInfoset"/>. However, for authoring purposes it may be useful to
                store the data in multiple physical files. By including the <code>xml:base</code>
                attribute in all element attribute models, all conforming Z39.86-AI Framework
                profiles are compatible with <xref linkend="refXInclude"/>, which provides a
                convenient and standards-based way to do this. </para>
        </section>
-->

    </chapter>

    <chapter xml:id="container">
        <title>Container</title>

        <section xml:id="container_intro" conformance="informative">
            <title>Introduction</title>
            <para> The need to package Z39.86 documents together with the local resources they
                reference has always existed, but the method and format for achieving this goal has
                not been formally defined in previous versions of the specification. As a result,
                producers have had the freedom to package their document sets in any of a variety of
                formats as their needs required, while user agent developers have been left with the
                problem of handling this variation when processing the container files. </para>
            <para> This specification seeks to redress this issue by formally defining the packaging
                format and mime type for bundling the local resources in Z39.86-AI document set, as
                well as to propose a common file extension format for the identification of
                container files. This approach will allow the rapid deployment and exchange of
                container files by removing the unnecessary ambiguity and investigation that has
                existed regarding their format and structure. </para>

            <note>
                <para> Although remote resources are an integral part of a document set, they are
                    referenced and obtained from their remote location by processing agents. Remote
                    resources optionally can be obtained and included as local resources within the
                    container for distribution/processing purposes, but any references to them in
                    the Z39.86-AI document should be updated to point to their new local location to
                    prevent repeat requests by processing agents. </para>
            </note>

        </section>

        <section xml:id="container_format">
            <title>Format</title>
            <para> The Z39.86-AI container format is a simplified version of the OEBPS Container
                Format (<xref linkend="refOCF"/>) for bundling the various local resources that
                constitute a Z39.86-AI document set together into a single file. All the
                requirements detailed in the OCF specification apply to the creation of Z39.86-AI
                container files, except where modified by this section. </para>

            <para> The Z39.86-AI container format employs the modified version of the ZIP format
                detailed in Section 4 of the OCF specification for packaging files. For identifying
                that the file is a Z39.86-AI container, however, the following MIME type must be
                used instead: <code>application/z3986-auth+zip</code> (see <xref
                    linkend="container_mediaType"/>). </para>

            <para> Each conformant container file must include a <code>META-INF</code> directory at
                the root of the container as per Section 3.5 of the OCF specification. This
                directory must include the required <code>container.xml</code> file detailed in
                Section 3.5.1, which in turn must contain a single <code>rootfile</code> element
                that points to the root Z39.86-AI document. </para>

            <para> The root document must have a MIME type of <code>application/xml</code> and the
                container must include the file as a resource; it is not permitted to reference a
                document external to the container. If a document has been decomposed into smaller
                xml fragments, the root must be the xml file into which all the components are
                included to reconstitute the complete Z39.86-AI document. </para>

            <para> The Z39.86-AI document together with all of the local resources associated with
                it must be included in a <code>Z3986-AI</code> directory at the root of the
                container, and all local resources must be referenced relative to the
                    <code>Z3986-AI</code> directory, (i.e., it is not permitted to include
                additional folders in the container root to store resources related to a document).
                In addition, a Z39.86-AI container file must not contain more than one Z39.86-AI
                document, nor should it include any alternate renditions of the contents. </para>

            <para> The following conditions apply to the optional reserved files allowed by the OCF
                specification: </para>

            <itemizedlist>
                <listitem>
                    <para>
                        <code>metadata.xml</code>, <code>manifest.xml</code>
                            and<code>signatures.xml</code> are not a normative part of the Z39.86-AI
                        container format, but may be included if desired. Processing agent support
                        must not be expected for these files or for the signing of container files,
                        however. </para>
                </listitem>
                <listitem>
                    <para> The contents of a Z39.86-AI container file must never be encrypted or
                        have digital rights management schemes applied to them, so the
                            <code>encryption.xml</code> and <code>rights.xml</code> files must never
                        be included. Where security is an issue, alternate means of protecting the
                        container file should be pursued instead. </para>
                </listitem>
            </itemizedlist>

            <para> The Z39.86-AI container format does not support OEBPS package files (<xref
                    linkend="refOPF"/>) and their inclusion in container files is not recommended. </para>


            <para>The following is an example of the structure of a typical Z39.86-AI container
                file. </para>

            <example conformance="informative">
                <title>Z39.86-AI container file structure (informative)</title>

                <programlisting xml:space="preserve">
mimetype
META-INF/
   container.xml
Z3986-AI/
   On the Origin of Species.xml
   metadata/
      mods.xml
      onix.xml
   images/
      cover.png
                    </programlisting>
            </example>

            <para> The <code>container.xml</code> file in the previous example would include the
                following mark up pointing to the root Z39.86-AI document: </para>

            <example conformance="informative">
                <title><code>container.xml</code> file mark up (informative)</title>

                <programlisting xml:space="preserve">
&lt;?xml version="1.0"?>
&lt;container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
  &lt;rootfiles>
    &lt;rootfile full-path="Z3986-AI/On the Origin of Species.xml" media-type="application/xml" />
  &lt;/rootfiles>
&lt;/container>
                    </programlisting>
            </example>

        </section>

        <section xml:id="container_extension">
            <title>File extension</title>
            <para> To facilitate the identification of the Z39.86-AI container files, containers
                should use the extension <code>.zai</code>. Alternate file extension are permitted
                so long as the container conforms with the ZIP requirements outlined in <xref
                    linkend="container_format"/>. </para>
            <para> File extensions are only a hint to the format of a container; the container's
                    <code>mimetype</code> file is the primary designator of the contents. </para>
        </section>

        <section xml:id="container_mediaType">
            <title>Media type</title>
            <para> This specification defines the following new media type for identifying Z39.86-AI
                container files: </para>

            <programlisting xml:space="preserve">
        <code>application/z3986-auth+zip</code>
                </programlisting>

            <para>Refer to <xref linkend="mediaTypeRegistration"/> for more information.</para>
        </section>

    </chapter>

    <chapter xml:id="resourcedirectory">
        <title>Resource directories</title>

        <section xml:id="resourcedirectoryIntroduction" conformance="informative">
            <title>Introduction</title>

            <para>Profiles and features are fully-developed markup languages in their own rights,
                and hence will require multiple documents to define them normatively: schemas, RDF
                vocabularies, and possibly normative prose. Profile and feature users will also
                benefit from informative resources, such as primers, best practices guides, and
                references to supporting software. Users, both human and machine, need a way to
                locate these profile- and feature-specific resources. This specification uses
                XHTML+RDFa (as defined in <xref linkend="refRDFa"/>) as the mechanism to associate a
                collection of normative and informative resources with a profile or a feature. The
                XHTML+RDFa document used to collect the references to these resources is called a
                    <emphasis>resource directory</emphasis>.</para>

            <para>As XHTML documents, resource directories are human-readable, and thus can serve as
                the primary source of information for all users of a profile or feature. Resource
                directories are also machine-readable documents, and thus can be sources for the
                discovery and retrieval of schemas, style sheets, RDF vocabularies and other types
                of resources that are needed by processing agents.</para>

            <para>Ideally, a resource directory will contain a rich variety of resources useful to
                both human and machine users of profiles: documentation, primers, schemas,
                stylesheets for both rendering and transformation of documents, etc.</para>

            <para>In order to facilitate interoperability of processing agents, this specification
                defines a <xref linkend="rdfPredefinedVocabsRD"/>. This vocabulary contains terms
                that describe and identify resources associated with profiles and features, and
                states how they are to be used.</para>
        </section>

        <section xml:id="resourcedirectoryConformance">
            <title>Resource directory conformance definition</title>

            <para>The resource directory for a profile or feature must be a document conforming to
                the <xref linkend="refRDFa"/> specification, using terms from the <xref
                    linkend="rdfPredefinedVocabsRD"/> as detailed below. </para>

            <itemizedlist>
                <listitem>
                    <para>The resource directory must include one or more references to relevant
                        normative external specifications to which the profile or feature being
                        described adheres. The term used to identify that resource must be <link
                            xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#specification-compliance"
                            >specification-compliance</link>.</para>
                </listitem>
                <listitem>
                    <para>The resource directory must identify the designated maintenance agency of
                        the profile or feature. The term used to identify that agency must be <link
                            xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#maintenance-agency"
                            >maintenance-agency</link>.</para>
                </listitem>
                <listitem>
                    <para>The resource directory should include information on the version history
                        of the profile or feature. A reference to the most recent published version
                        must be expressed using the <link
                            xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#current-version-uri"
                            >current-version-uri</link> term. A reference to a version history
                        catalog must be expressed using the <link
                            xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#version-history"
                            >version-history</link> term. </para>
                </listitem>
                <listitem>
                    <para>The resource directory should include at least one resource identified by
                        the term <link
                            xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/#reference"
                            >reference</link> and which resolves to a human-readable description of
                        the profile's or feature's purpose and structure.</para>
                </listitem>

            </itemizedlist>

            <para>Note that additional resource directory requirements specific to profiles and
                features are defined in <xref linkend="profileConformanceResourceDirectory"/> and
                    <xref linkend="featureConformanceResourceDirectory"/> respectively. All other
                terms defined by the <xref linkend="rdfPredefinedVocabsRD"/> are optional.</para>

            <para>This specification allows terms from other vocabularies than the <xref
                    linkend="rdfPredefinedVocabsRD"/> to be included in resource directory
                documents.</para>

        </section>

    </chapter>

    <chapter xml:id="rdfVocabularies">
        <title>RDF vocabularies</title>

        <section xml:id="rdfIntro" conformance="informative">
            <title>Introduction</title>

            <para> The Z39.86-AI Framework makes use of <xref linkend="refRDFa"/> and the role
                attribute (<xref linkend="refROLE"/>) to express document-level metadata and to
                express semantic inflections on individual elements in the document content (see
                    <xref linkend="abstractDocumentModel_metaAttributesCollection"/>). RDF
                vocabularies are used to define controlled lists of terms that provide consistency
                in the application of metadata across profiles and between producers. </para>

            <para>The Z39.86-AI Framework provides a set of vocabularies (see <xref
                    linkend="vocabCatalog"/>). This section describes the nature of these
                vocabularies and defines rules for how associate these and additional vocabularies
                with a Z39.86-AI document. Rules for the processing of vocabulary terms are defined
                in <xref linkend="processingAgentConformanceRDF"/>.</para>

            <para><remark role="todo">REMARK this section will need to be updated to reflect RDFa
                    1.1 (<link xlink:href="http://code.google.com/p/zednext/issues/detail?id=107"
                        >Issue 107</link>)</remark>.</para>
        </section>

        <section xml:id="rdfPredefinedVocabs" conformance="informative">
            <title>Vocabularies defined by this specification</title>
            <section xml:id="rdfPredefinedVocabsDecl" xreflabel="Instance Metadata Vocabulary">
                <title>Z39.86-2010 Instance Metadata Vocabulary</title>
                <para>This vocabulary defines a set of terms for use in declaring the profile to
                    which the document conforms as well as any features in use (see <xref
                        linkend="documentsReferencingProfilesFeatures"/>), and to express
                    document-level metadata (see <xref linkend="documentsMetadata"/>). Use of this
                    vocabulary is required in all profiles. </para>
                <para>The canonical URI of the Instance Metadata Vocabulary is <link
                        xlink:href="http://www.daisy.org/z3986/2010/vocab/decl/"
                        >http://www.daisy.org/z3986/2010/vocab/decl/</link>.</para>
            </section>

            <section xml:id="rdfPredefinedVocabsCore" xreflabel="Structural Semantics Vocabulary">
                <title>Z39.86-2010 Structural Semantics Vocabulary</title>
                <para>This vocabulary defines a set of terms relating to the description of
                    structural semantics of documents in general, and written works in particular.
                    It is primarily intended to be used for semantic inflection on individual
                    elements in the document content. Use of this vocabulary is optional.</para>
                <para>The canonical URI of the Structural Semantics Vocabulary <link
                        xlink:href="http://www.daisy.org/z3986/2010/vocab/structure/"
                        >http://www.daisy.org/z3986/2010/vocab/structure/</link>.</para>
            </section>

            <section xml:id="rdfPredefinedVocabsRD" xreflabel="Resource Directory Vocabulary">
                <title>Z39.86-2010 Resource Directory Vocabulary</title>
                <para>This vocabulary defines a set of terms for use in profile and feature resource
                    directories. Requirements on the application of this vocabulary in resource
                    directory documents are defined in <xref linkend="resourcedirectoryConformance"
                    />.</para>
                <para>The canonical URI of the Resource Directory Vocabulary is <link
                        xlink:href="http://www.daisy.org/z3986/2010/vocab/resourcedirectory/"
                        >http://www.daisy.org/z3986/2010/vocab/resourcedirectory/</link>.</para>
            </section>
        </section>

        <section xml:id="rdfAssociatingVocab">
            <title>Associating vocabularies with Z39.86-AI documents</title>

            <para>The general mechanism to associate vocabularies with Z39.86-AI documents and
                define CURIE prefix bindings for these vocabularies is defined in <xref
                    linkend="refRDFa"/>.</para>

            <para>In addition to the general mechanism, a profile may define an RDF vocabulary as
                the <emphasis>default</emphasis> vocabulary using the mechanism defined in <xref
                    linkend="profileConformanceResourceDirectory"/>. In a given Z39.86-AI document,
                all occurring CURIEs that have no explicit prefix are resolved as terms in this
                default vocabulary. It is a document error if a document uses CURIEs without
                prefixes when the profile to which the document adheres does not define a default
                vocabulary. <remark role="todo"> REMARK this mechanism will change in RDFa 1.1
                        (<link xlink:href="http://code.google.com/p/zednext/issues/detail?id=107"
                        >Issue 107</link>)</remark>. </para>

            <para>A profile must not impose restrictions on the occurrence of references to
                vocabularies other than the profile's default in Z39.86-AI documents.</para>
        </section>

        <section xml:id="rdfVocabFormats" conformance="informative">
            <title>Format of RDF vocabularies</title>
            <para>This specification does not impose any restrictions on the format of RDF
                vocabularies associated with Z39.86-AI documents.</para>
            <para>When developing vocabularies intended for use within the Z39.86-AI Framework, RDFa
                in XHTML, as defined by <xref linkend="refRDFa"/>, is recommended to be the
                principal publication form. Implementers should be aware that vocabularies expressed
                in for example RDF Schema (<xref linkend="refRDFs"/>) or Notation3 (<xref
                    linkend="refN3"/>) may also occur.</para>
        </section>
    </chapter>

    <chapter xml:id="processingAgents">
        <title>Processing Agents</title>

        <section xml:id="processingAgentsIntro" conformance="informative">
            <title>Introduction</title>

            <para> Processing agents are the applications used to interact with a Z39.86-AI document
                during its lifecycle, from its creation through to its provision to end users.
                Primary examples include programs that facilitate the markup (xml editors, word
                processing applications), programs that check the document integrity (validators),
                and programs that process it to create final output formats (transformation
                pipelines). Note that the definition of processing agent as used in this
                specification does not include applications used for consumption by end users. <!-- TODO the above should perhaps be clearer and say " Note that, as follows from the 
                    fact that the zedai framework does not define end user oriented formats, the definition..." -->
                <!-- In most cases, however, a processing agent will be an
                application that takes a Z39.86-AI document and, through a sequence of steps,
                transforms it into a format that can be distributed to end users or that can be fed
                as an input into another publishing process. -->
            </para>

            <para>Processing agents are not expected to be able to handle any Z39.86-AI document
                that they encounter. A processing agent declares support for profiles individually,
                and must abort processing whenever it encounters a document conforming to a profile
                that it does not support, and by default also when encountering a document
                conforming to a supported profile but with an unsupported version number (either
                newer or older). Although this restriction is severe, it ensures that documents are
                not rendered in a way that contradicts their use, and that any resulting outputs are
                not prone to bugs (subtle or obvious) resulting from the passive application of new
                or out-dated rules. This draconian abort principle is primarily motivated by the
                anticipated use of the Z39.86-AI framework in fully automated provisioning contexts
                where errors must not pass through silently, and where the integrity of the output
                cannot be manually controlled.</para>

            <para> A processing agent's support for features is independent of its support for
                profiles, and by default the same draconian abort principle applies when
                encountering an unrecognized or unsupported feature. As described in <xref
                    linkend="processingAgentConformanceInitializationBehavior"/>, however, features
                may define fallback methods that allow processing agents to adapt their behavior in
                a controlled manner and continue processing the document in spite of the fact that a
                given feature is not supported. </para>

            <para> All processing agents should provide complete profile and feature support
                information to users in order to reduce the likelihood that they will be used to
                process incompatible documents and to ensure that they conform to user expectations. </para>

        </section>

        <section xml:id="processingAgentConformance">
            <title>Processing agent conformance definition</title>
            <para>A conformant processing agent must meet all of the following criteria:</para>
            <itemizedlist>
                <listitem>
                    <para>It must adhere to all conformance requirements on non-validating XML
                        processors as defined in <xref linkend="refXML"/>.</para>
                </listitem>
                <listitem>
                    <para>It must adhere to all conformance requirements on processors as defined in
                            <xref linkend="refXMLNamespaces"/>.</para>
                </listitem>
                <listitem>
                    <para>It should be a conformant application as defined in XML Inclusions (<xref
                            linkend="refXInclude"/>). If it is not a conformant application as
                        defined in XML Inclusions, it must, if set to process a document that
                        contains elements in the <link
                            xlink:href="http://www.w3.org/TR/xinclude/#syntax">XInclude
                            namespace</link>, issue a notification and abort processing .</para>
                </listitem>
                <listitem>
                    <para>It must detect and handle document profile and feature references as
                        specified in <xref
                            linkend="processingAgentConformanceInitializationBehavior"/>.</para>
                </listitem>
                <listitem>
                    <para>It must comply to the requirements for processing RDF vocabulary terms
                        specified in <xref linkend="processingAgentConformanceRDF"/>.</para>
                </listitem>
                <listitem>
                    <para><remark role="todo">TODO MGy: I suppose we should require support for
                            reading the container? If so, make clear that reading docs both from
                            container and standalone is required.</remark></para>
                </listitem>
                <listitem>
                    <para>If claiming to support a given profile or feature, it must adhere to all
                        behavioral rules defined by the given profile or feature through the
                        corresponding resource directory and in the associated definitions.</para>
                </listitem>
            </itemizedlist>

            <para>A conforming processing agent is not required to be validating, i.e. support
                validating a given Z39.86-AI document against the schema resource(s) defined as
                normative in the resource directory of a given profile. A conforming processing
                agent may abort processing if set to process a document that is known to be
                invalid.</para>
        </section>

        <section xml:id="processingAgentConformanceInitializationBehavior">
            <title>Initialization</title>

            <para>Processing agents must execute the following ordered sequence of steps during the
                initial stage of processing a Z39.86-AI document.</para>

            <orderedlist>
                <listitem>
                    <para>The processing agent attempts to retrieve the <link
                            linkend="profileConformanceIdentityURI">profile identity URI</link>,
                        available at the document location defined in <xref
                            linkend="documentsReferencingProfilesFeatures"/>.</para>
                </listitem>
                <listitem>
                    <para>If retrieval of the profile identity URI fails, then the processing agent
                        must issue a notification and abort processing.</para>
                </listitem>
                <listitem>
                    <para>Else, the processing agent analyzes the identity URI in order to ascertain
                        whether the document adheres to a profile that the processing agent
                        supports: </para>
                    <itemizedlist xml:id="processingIdentityURIParsing">
                        <listitem>
                            <para>If the profile identity URI <emphasis>excluding the version
                                    segment</emphasis> represents a profile that is not supported by
                                the processing agent, then it must issue a notification and abort
                                processing.</para>
                        </listitem>
                        <listitem xml:id="processingIdentityURIParsingVersionSegment">
                            <para>Else, if the version segment represents a profile version that is
                                not supported by the processing agent, then it must issue a
                                notification and abort processing, unless explicitly instructed by
                                the client to continue processing under this particular
                                circumstance. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>The processing agent retrieves any <link
                            linkend="featureConformanceIdentityURI">feature identity URIs</link>,
                        available at the document location defined in <xref
                            linkend="documentsReferencingProfilesFeatures"/>.</para>
                    <para>The processing agent analyses each identity URI in turn in order to
                        ascertain whether the feature represented by the URI is either
                            <emphasis>supported</emphasis>, <emphasis>recognized but not
                            supported</emphasis>, or <emphasis>not recognized</emphasis>:</para>
                    <variablelist>
                        <varlistentry>
                            <term>Not recognized</term>
                            <listitem>
                                <para>If the feature identity URI <emphasis>excluding the version
                                        segment</emphasis> represents a feature that is not
                                    recognized by the processing agent, then it must issue a
                                    notification and abort processing.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>Recognized but not supported</term>
                            <listitem>
                                <para>If the feature identity URI represents a feature that is
                                    recognized but not supported by processing agent, then it must
                                    issue a notification and abort processing, unless normative
                                    prose available through the feature's resource directory
                                    specifies a behavioral fallback to employ under this particular
                                    circumstance.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>Supported</term>
                            <listitem>
                                <para>If the feature identity URI <emphasis>excluding the version
                                        segment</emphasis> represents a feature that is supported by
                                    the processing agent, then it processes the version segment in
                                    the same way as for <link
                                        linkend="processingIdentityURIParsingVersionSegment">profile
                                        version segments</link>. </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
                <listitem>
                    <para>If the processing agent reaches this step without having aborted
                        processing, it has completed initialization successfully.</para>
                </listitem>
            </orderedlist>
        </section>

        <section xml:id="processingAgentConformanceRDF">
            <title>Processing of vocabulary terms</title>
            <para>The following rules apply to processing agents with regards to the processing of
                RDF vocabulary terms:</para>
            <itemizedlist>
                <listitem>
                    <para>A processing agent must recognize the terms used to express the required
                        document level metadata (see <xref linkend="documentsMetadataRequired"/>),
                        and the terms used to express the profile to which the document conforms
                        (see <xref linkend="documentsReferencingProfilesFeatures"/>).</para>
                </listitem>
                <listitem>
                    <para>If a processing agent claims support for a profile and the profile defines
                        a default RDF vocabulary, then the processing agent should natively
                        recognize all terms in that vocabulary.</para>
                </listitem>
                <listitem>
                    <para>A processing agent may associate specialized behaviors with none, some or
                        all of the RDF vocabulary terms that it natively recognizes.</para>
                </listitem>
                <listitem>
                    <para>A processing agent should support the dereferencing of unrecognized CURIEs
                        occurring in Z39.86-AI documents. If a processing agent successfully
                        dereferences an unrecognized CURIE, it may (depending on the nature of and
                        RDF data available in the referenced vocabulary property) employ adaptive
                        behaviors in response to the change to the document information set that
                        results from the CURIE dereferencing.</para>
                </listitem>
                <listitem>
                    <para>If the attempt of a processing agent to dereference an unrecognized CURIE
                        fails, then the processing agent should issue a notification to the client,
                        and then must continue processing the document, basing its behavior on the
                        carrying XML element alone.</para>
                </listitem>
                <listitem>
                    <para>If a processing agent does not support the dereferencing of unrecognized
                        CURIEs, then the processing agent must upon encountering an unrecognized
                        CURIE continue processing the document, basing its behavior on the carrying
                        XML element alone.</para>
                </listitem>
                <listitem>
                    <para>When a vocabulary term is used for semantic inflection, and processing
                        agent behavior associated with that term contradicts behavior associated
                        with the carrying XML element, then the behavior associated with the element
                        must take precedence.</para>
                </listitem>
            </itemizedlist>
        </section>

    </chapter>

    <appendix xml:id="catalogs">
        <title>Profile, feature and vocabulary catalogs</title>
        <section xml:id="profileCatalog">
            <title>Profile catalog</title>
            <para>The catalog of profiles hosted and maintained by the Z39.86 Advisory Committee is
                located at <link xlink:href="http://www.daisy.org/z3986/2010/auth/profiles/"
                    >http://www.daisy.org/z3986/2010/auth/profiles/</link>.</para>
        </section>
        <section xml:id="featureCatalog">
            <title>Feature catalog</title>
            <para>The catalog of features hosted and maintained by the Z39.86 Advisory Committee is
                located at <link xlink:href="http://www.daisy.org/z3986/2010/auth/features/"
                    >http://www.daisy.org/z3986/2010/auth/features/</link>.</para>
        </section>
        <section xml:id="vocabCatalog">
            <title>Vocabulary catalog</title>
            <para>The catalog of RDF vocabularies hosted and maintained by the Z39.86 Advisory
                Committee is located at <link xlink:href="http://www.daisy.org/z3986/2010/vocab/"
                    >http://www.daisy.org/z3986/2010/vocab/</link>.</para>
            <para>This catalog normatively defines the URIs of the core vocabularies that are
                predefined by this specification (see <xref linkend="rdfPredefinedVocabs"/>, and may
                be extended to reference additional vocabularies as such are developed by the Z39.86
                Advisory Committee. </para>
        </section>
    </appendix>

    <appendix xml:id="uriIdentity">

        <title>Profile and feature identity URI Scheme</title>

        <para> Identity URIs are used to uniquely identify Z39.86-AI profiles and features. Each URI
            must resolve to a <link linkend="resourcedirectory">resource directory</link> where the
            profile or feature is defined and must be of the form: </para>

        <programlisting xml:space="preserve">
                <remark role="todo">TODO review EBNF</remark>
                identity ::= protocol, home, static, name, version
                protocol ::= 'http://'
                home ::= [A-Za-z0-9./]*
                static ::= '/z3986/2010/auth/profiles/' | '/z3986/2010/auth/features/'
                name ::= [A-Za-z0-9.]*, '/'
                version ::= [0-9.]*, '/'
        </programlisting>

        <para> The <code>static</code> segment definition depends on whether a profile or feature
            URI is being defined. </para>

        <para> The provider of the feature or profile owns the identity URI and must assure that the
            identity URI has no public access restrictions and is valid with respect to <xref
                linkend="refRFC3986"/>. </para>

        <para> When comparing two identity URIs for equality, processing agents must follow the
            rules specified by <xref linkend="refRFC3986"/>. </para>
        <!--
        <para> The versioning segment identifies the major and minor profile or feature version.
        Refer to <xref linkend="versioning"/> for more information. </para> -->
        <para> The version segment identifies profile or feature version, and typically contains
            major and a minor version indicators. </para>
    </appendix>

    <appendix xml:id="schemas">
        <title>Schema languages</title>

        <para> Any of the following schema languages may be used to express the grammars of
            profiles, modules and features: </para>

        <itemizedlist>
            <listitem>
                <para>RelaxNG, version 1.0 <xref linkend="refRelaxNG"/></para>
            </listitem>
            <listitem>
                <para>NVDL, version 1.0 <xref linkend="refNVDL"/></para>
            </listitem>
            <listitem>
                <para>ISO Schematron, version 1.0 <xref linkend="refSchematron"/></para>
                <para><remark role="todo">TODO revision underway</remark></para>
            </listitem>
            <listitem>
                <para>W3C XML Schema, version 1.0 <xref linkend="refXMLSchema"/></para>
                <para><remark role="todo">TODO update XSD 1.0 req to XSD 1.1?</remark></para>
            </listitem>
        </itemizedlist>

    </appendix>

    <!--
    <appendix xml:id="versioning" conformance="normative">
        <title>Profile and feature versioning scheme</title>

        <section xml:id="versioningReleases">
            <title>Releases</title>

            <section xml:id="versioningReleasesMajor">
                <title>Major</title>

                <para> Major releases represent significant changes/additions/deletions to the
                    functionality or structure of a profile's components or features, and are
                    typically not backwards compatible with earlier major releases. </para>

                <para> Changes that result in major releases may not always reflect significant
                    changes to content models, but may alter the way that content should be handled
                    or processed. Data conforming to a previous major releases consequently must not
                    be assumed to be be compatible with a new major release, even where that data
                    may continue to be valid. </para>
            </section>

            <section xml:id="versioningReleasesMinor">
                <title>Minor</title>

                <para> Minor releases represent smaller fixes and tweaks to the functionality or
                    structure a profile's components or features. Minor version are typically
                    backwards compatible with other minor releases under the same major release, but
                    may introduce new concepts and components. </para>
            </section>
        </section>

        <section xml:id="versioningScheme">
            <title>Scheme</title>

            <para> All profiles, modules and features must include a version number that uniquely
                identifies them and allows earlier and/or later iterations to be distinguished. In
                the case of profiles and modules, the version number must consist of both a major
                and a minor number using the scheme: </para>

            <programlisting xml:space="preserve">
                <emphasis>major</emphasis>.<emphasis>minor</emphasis>
            </programlisting>

            <para> For features, the idenfication scheme and number used by the maintaining
                authority should be retained. <remark role="todo">TODO this means we have to call
                    the MathML feature 3.0... this was not the intent (we need to version our
                    particular adaption of MathML)</remark></para>

        </section>

        <section xml:id="versioningNumberingConventions">
            <title>Numbering conventions</title>

            <para> It is recommended when issuing new releases that both major and minor indicators
                are incremented in steps of 1. Decrementing of indicators is not permitted, even
                where integer values have been skipped between releases. </para>

            <para> Minor indicators must be padded with 0s to two digits, to prevent the
                sequentiality issues that arise with single digits (e.g., to prevent issues
                determining if <code>1.91</code> is the successor of <code>1.90</code> or
                    <code>1.9</code>). Three digit padding may be used where a high revision release
                schedule is anticipated between major revisions. The padding scheme used must,
                however, remain consistent across a major release, but can change from major release
                to major release. </para>

            <para> It is not valid to append alphabetic identifiers to either major or minor numbers
                (e.g. <code>1.12a</code>). Only integer values are permitted. </para>

            <para> A major number of 0 should only be used for profiles, modules and features that
                are in a pre-release state. </para>

            <para> A minor number of 1 should be used to indicate the initial release of a new major
                version. </para>
        </section>

        <section xml:id="versioningHistory">
            <title>History</title>

            <para> All profiles and modules must provide a revision history for each new major and
                minor release, either embedded within their source or as a part of their abstract
                definition or documentation. The revision history must specify the nature of the
                changes made and their impact on processing agents. </para>

            <para> In the case of features, reference to the revision history and/or new processing
                requirements provided by the maintaining authority must be provided. </para>
        </section> 
        -->
    <!--
        <section xml:id="versioningProcessing">
            <title>Processing</title>

            <section xml:id="versioningProcessingProfiles">
                <title>Profiles</title>

                <para> A processing agent must always abort processing when encountering a Z39.86-AI
                    document that declares an unrecognized profile or a version of a recognized
                    profile that is not supported (either newer or older). </para>

                <para> Processing agents must abort processing regardless of whether the unsupported
                    profile represents a change to its major or minor number. No forwards or
                    backwards compatibility of data should ever be assumed, regardless of the nature
                    of the release. </para>
            </section>

            <section xml:id="versioningProcessingFeatures">
                <title>Features</title>

                <para> Similar to profiles, when a processing agent encounters a feature it does not
                    recognize or support, it must abort processing. When encountering an
                    unrecognized version of a supported feature, however, a processing agent may
                    abort or may include a set of fallback behaviors. </para>

            </section>

        </section>
-->
    <!--
    </appendix> -->

    <appendix xml:id="mediaTypeRegistration">
        <title>Media type registration</title>

        <!--
        <section xml:id="mediaTypeRegistration_xmlDoc">
            <title>Z39.86-AI XML Documents</title>

            <variablelist>
                <varlistentry>
                    <term>Type name</term>
                    <listitem>
                        <para>application</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Subtype name</term>
                    <listitem>
                        <para>z3986-auth+xml</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Required parameters</term>
                    <listitem>
                        <para>None.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Optional parameters</term>
                    <listitem>
                        <variablelist>
                            <varlistentry>
                                <term>charset</term>
                                <listitem>
                                    <para> The same semantics as the <code>charset</code> parameter
                                        of application/xml, as specified in <xref
                                            linkend="refRFC3023"/>. </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Encoding considerations</term>
                    <listitem>
                        <para>As Z39.86-AI documents are XML documents, the same encoding
                            considerations apply as for application/xml, as specified in <xref
                                linkend="refRFC3023"/>.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Security considerations</term>
                    <listitem>
                        <para>None.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Interoperability considerations</term>
                    <listitem>
                        <para> Z39.86-AI documents are structured to conform to unique profiles,
                            which means that only well-formedness can be expected. Rules for
                            processing conformant and non-conformant content are provided within
                            this document. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Published specification</term>
                    <listitem>
                        <para> This media type registration is extracted from Appendix D of the
                                <link linkend="introduction">Z39.86 Authoring and Interchange
                                Framework Specification</link>. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Applications which use this media type</term>
                    <listitem>
                        <para> There are no applications that currently recognize this media type.
                            This new type is being registered to enable operation within XML
                            editors, word processors, web browsers and in text-to-speech playback
                            devices. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Additional information</term>
                    <listitem>
                        <variablelist>
                            <varlistentry>
                                <term>Magic number(s):</term>
                                <listitem>
                                    <para> No single initial set of bytes uniquely identifies
                                        Z39.86-AI documents. See <xref linkend="refRFC3023"/> for
                                        common considerations for XML documents.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>File extension(s):</term>
                                <listitem>
                                    <para> The extension .xml is primarily used to identify
                                        Z39.86-AI documents, but not exclusively. </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>Macintosh file type code(s)</term>
                                <listitem>
                                    <para>TEXT</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Intended usage</term>
                    <listitem>
                        <para>COMMON</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Restrictions on usage</term>
                    <listitem>
                        <para>None.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Person to contact for further information</term>
                    <listitem>
                        <variablelist>
                            <varlistentry>
                                <term>Name</term>
                                <listitem>
                                    <para>Markus Gylling</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>Email</term>
                                <listitem>
                                    <para>mgylling@daisy.org</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>Author/Change controller</term>
                                <listitem>
                                    <para> The Z39.86-AI specification is maintained by the Z39.86
                                        Advisory Committee of the DAISY Consortium. </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        end xml doc media type registration
-->

        <section xml:id="mediaTypeRegistration_container">
            <title>Z39.86-AI container format</title>

            <variablelist>
                <varlistentry>
                    <term>Type name</term>
                    <listitem>
                        <para>application</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Subtype name</term>
                    <listitem>
                        <para> z3986-auth+zip </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Required parameters</term>
                    <listitem>
                        <para>None.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Optional parameters</term>
                    <listitem>
                        <para>None.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Encoding considerations</term>
                    <listitem>
                        <para>Z39.86-AI container files are binary files in ZIP format.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Security considerations</term>
                    <listitem>
                        <para> The file size and validity of container file data should always be
                            rigorously verified by processors. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Interoperability considerations</term>
                    <listitem>
                        <para>None.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Published specification</term>
                    <listitem>
                        <para> This media type registration is extracted from Appendix D of the
                                <link linkend="introduction">Z39.86 Authoring and Interchange
                                Framework Specification</link>. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Applications which use this media type</term>
                    <listitem>
                        <para> There are no applications that currently recognize this media type.
                            This new type is being registered to enable operation within XML
                            editors, word processors, web browsers and in text-to-speech playback
                            devices. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Additional information</term>
                    <listitem>
                        <variablelist>
                            <varlistentry>
                                <term>Magic number(s):</term>
                                <listitem>
                                    <para> None. </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>File extension(s):</term>
                                <listitem>
                                    <para>
                                        <code>.zai</code>
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>Macintosh file type code(s)</term>
                                <listitem>
                                    <para>ZIP</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Intended usage</term>
                    <listitem>
                        <para>COMMON</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Restrictions on usage</term>
                    <listitem>
                        <para>None.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Person to contact for further information</term>
                    <listitem>
                        <variablelist>
                            <varlistentry>
                                <term>Name</term>
                                <listitem>
                                    <para>Markus Gylling</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>Email</term>
                                <listitem>
                                    <para>mgylling@daisy.org</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>Author/Change controller</term>
                                <listitem>
                                    <para> The Z39.86-AI specification is maintained by the Z39.86
                                        Advisory Committee of the DAISY Consortium. </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

    </appendix>

    <appendix xml:id="acknowledgements" role="acknowledgements" conformance="informative">
        <title>Acknowledgements</title>
        <para> The following are the members of the Z39.86-2010 Authoring and Interchange Working
            Group responsible for the creation of this specification: <bibliolist>
                <bibliomixed>
                    <personname>Markus Gylling</personname>, <title>Lead</title>, <orgname>DAISY
                        Consortium</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Josh Altherr</personname>, <orgname>gh, LLC</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Ole Holst Andersen</personname>, <orgname>DBB</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Marisa DeMeglio</personname>, <orgname>DAISY Consortium</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Christian Egli</personname>, <orgname>Swiss Federation of the Blind
                        and Visually Impaired</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Matt Garrish</personname>, <orgname>CNIB</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Boris Goldowsky</personname>, <orgname>CAST, Inc.</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Leona Holloway</personname>, <orgname>Vision Australia</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Kenny Johar</personname>, <orgname>Vision Australia</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Dennis Leas</personname>, <orgname>gh, LLC</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Sam Ogami</personname>, <orgname>California State
                        University</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Stephen Phippen</personname>, <orgname>RNIB</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>James Pritchett</personname>, <orgname>Recording for the Blind &amp;
                        Dyslexic</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Kathryn Randall</personname>, <orgname>Vision Australia</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Per Sennels</personname>, <orgname>Huseby kompetansesenter</orgname>
                </bibliomixed>
            </bibliolist>
        </para>
        <para> The metadata portion of the specification was created by a working group including
            the following members: <bibliolist>
                <bibliomixed>
                    <personname>Matt Garrish</personname>, <title>Lead</title>,
                        <orgname>CNIB</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Bob Axtell</personname>, <orgname>Library of Congress</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Wendy Taylor</personname>, <orgname>RNIB</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Christian Wallin</personname>, <orgname>DBB</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Marcus Westlind</personname>, <orgname>TPB</orgname>
                </bibliomixed>
                <bibliomixed>
                    <personname>Richard Wilson</personname>, <orgname>CNIB</orgname>
                </bibliomixed>
            </bibliolist>
        </para>
    </appendix>

    <bibliography>
        <title>References</title>

        <!-- note when adding "et al." to the end of a personname field, omit the terminating period; one is auto-generated after -->

        <bibliodiv>
            <title>Normative</title>
            <biblioentry xml:id="refBMP">
                <abbrev>BMP</abbrev>
                <title>
                    <link xlink:href="http://TODO">
                        <remark role="todo">TODO need a reference to BMP (or make
                            informative)</remark>
                    </link>
                </title>
            </biblioentry>
            <biblioentry xml:id="refCURIE">
                <abbrev>CURIE</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/curie/"> CURIE Syntax 1.0 - A syntax for
                        expressing Compact URIs</link>
                </title>
                <editor>
                    <personname>M. Birbeck, et al</personname>
                </editor>
                <date>16 January 2009 [DRAFT]</date>
            </biblioentry>
            <biblioentry xml:id="refDC">
                <abbrev>DCMI</abbrev>
                <title>
                    <link xlink:href="http://www.dublincore.org/documents/dcmi-terms/">Dublin Core
                        Metadata Initiative Metadata Terms</link>
                </title>
                <date>14 January 2008</date>
            </biblioentry>
            <biblioentry xml:id="refSchematron">
                <abbrev>ISOSchematron</abbrev>
                <title>
                    <link
                        xlink:href="http://standards.iso.org/ittf/PubliclyAvailableStandards/c040833_ISO_IEC_19757-3_2006(E).zip"
                        >ISO/IEC 19757-3: Rule-based validation — Schematron</link>
                </title>
            </biblioentry>
            <biblioentry xml:id="refITS">
                <abbrev>ITS</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/its/">Internationalization Tag Set (ITS)
                        Version 1.0</link>
                </title>
                <editor>
                    <personname>C. Lieske, et al</personname>
                </editor>
                <date>3 April 2007</date>
            </biblioentry>
            <biblioentry xml:id="refJPEG">
                <abbrev>JPEG</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/Graphics/JPEG/itu-t81.pdf">JPEG Standard
                        (JPEG ISO/IEC 10918-1 ITU-T Recommendation T.81)</link>
                </title>
            </biblioentry>
            <biblioentry xml:id="refMODS">
                <abbrev>MODS</abbrev>
                <title>
                    <link xlink:href="http://www.loc.gov/standards/mods/">Metadata Object
                        Description Schema (MODS)</link>
                </title>
            </biblioentry>
            <biblioentry xml:id="refNVDL">
                <abbrev>NVDL</abbrev>
                <title>
                    <link
                        xlink:href="http://standards.iso.org/ittf/PubliclyAvailableStandards/c038615_ISO_IEC_19757-4_2006(E).zip"
                        >ISO/IEC 19757-4: NVDL (Namespace-based Validation Dispatching
                        Language)</link>
                </title>
            </biblioentry>
            <biblioentry xml:id="refOCF">
                <abbrev>OCF</abbrev>
                <title>
                    <link xlink:href="http://idpf.org/ocf/ocf1.0/download/ocf10.htm">OEBPS Container
                        Format (OCF) 1.0</link>
                </title>
                <date>11 September 2006</date>
            </biblioentry>
            <!--
                <biblioentry xml:id="refRDDL">
                <abbrev>RDDL</abbrev>
                <title>
                <link xlink:href="http://www.rddl.org/">Resource Directory Description Language
                (RDDL)</link>
                </title>
                <editor>
                <personname>J. Borden, T. Bray</personname>
                </editor>
                <date>1 March 2001</date>
                </biblioentry>
            -->
            <biblioentry xml:id="refPNG">
                <abbrev>PNG</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/PNG/">Portable Network Graphics (PNG)
                        Specification (Second Edition)</link>
                </title>
                <editor>
                    <personname>D. Duce, et al</personname>
                </editor>
                <date>10 November 2003</date>
            </biblioentry>
            <biblioentry xml:id="refRDFa">
                <!-- TODO when updating this to RDFa 1.1, create a *new* id for the biblioentry, as all preexisting
                    references to this entry need to be checked whether to refer to RDFa 1.1 Core or XHTML+RDFa 1.1 -->
                <abbrev>RDFa</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/rdfa-syntax/">RDFa in XHTML: Syntax and
                        Processing</link>
                </title>
                <editor>
                    <personname>B. Adida, et al</personname>
                </editor>
                <date>14 October 2008</date>
            </biblioentry>
            <biblioentry xml:id="refRelaxNG">
                <abbrev>RelaxNG</abbrev>
                <title>
                    <link
                        xlink:href="http://standards.iso.org/ittf/PubliclyAvailableStandards/c052348_ISO_IEC_19757-2_2008(E).zip"
                        >ISO/IEC 19757-2: Regular-grammar-based validation &#8212; RELAX NG</link>
                </title>
                <date>3 December 2001</date>
            </biblioentry>
            <biblioentry xml:id="refRNC">
                <abbrev>RNC</abbrev>
                <title>
                    <link xlink:href="TODO">TODO RelaxNG compact syntax</link>
                </title>
                <date>3 December 2001</date>
            </biblioentry>
            <biblioentry xml:id="refRFC1738">
                <abbrev>RFC1738</abbrev>
                <title>
                    <link xlink:href="http://www.ietf.org/rfc/rfc1738.txt">Uniform Resource Locators
                        (URL)</link>
                </title>
                <author>
                    <personname>Berners-Lee, et al</personname>
                </author>
                <date>December 1994</date>
            </biblioentry>
            <biblioentry xml:id="refRFC2046">
                <abbrev>RFC2046</abbrev>
                <title>
                    <link xlink:href="http://www.ietf.org/rfc/rfc2046.txt">Multipurpose Internet
                        Mail Extensions (MIME) Part Two: Media Types</link>
                </title>
                <author>
                    <personname>N. Freed, N. Borenstein</personname>
                </author>
                <date>November 1996</date>
            </biblioentry>
            <biblioentry xml:id="refRFC2119">
                <abbrev>RFC2119</abbrev>
                <title>
                    <link xlink:href="http://www.ietf.org/rfc/rfc2119.txt">Key words for use in RFCs
                        to Indicate Requirement Levels (RFC2119)</link>
                </title>
                <date>March 1997</date>
            </biblioentry>
            <biblioentry xml:id="refRFC3023">
                <abbrev>RFC3023</abbrev>
                <title>
                    <link xlink:href="http://www.ietf.org/rfc/rfc3023.txt">XML Media Types</link>
                </title>
                <author>
                    <personname>M. Murata, S. St.Laurent and D. Kohn</personname>
                </author>
                <date>January 2001</date>
            </biblioentry>
            <biblioentry xml:id="refRFC3986">
                <abbrev>RFC3986</abbrev>
                <title>
                    <link xlink:href="http://www.ietf.org/rfc/rfc3986.txt">Uniform Resource
                        Identifier (URI): Generic Syntax</link>
                </title>
                <author>
                    <personname>Berners-Lee, et al</personname>
                </author>
                <date>January 2005</date>
            </biblioentry>
            <biblioentry xml:id="refROLE">
                <abbrev>ROLE</abbrev>
                <title>
                    <link xlink:href="http://TODO">
                        <remark role="todo">TODO need a reference to Protocols and Formats
                            WG</remark>
                    </link>
                </title>
            </biblioentry>
            <biblioentry xml:id="refXHTML2">
                <abbrev>XHTML2</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xhtml2/">XHTML 2.0</link>
                </title>
                <author>
                    <personname>J. Axelsson, et al</personname>
                </author>
                <date>2009 [DRAFT]</date>
            </biblioentry>
            <!--
            <biblioentry xml:id="refXHTMLMOD2">
                <abbrev>XHTMLMOD2</abbrev>
                <title>
                    <link
                        xlink:href="http://www.w3.org/MarkUp/2009/ED-xhtml-modularization2-20090123/"
                        >Modularization of XHTML™ 2.0</link>
                </title>
                <author>
                    <personname>M. Birbeck, et al</personname>
                </author>
                <date>2009 [DRAFT]</date>
            </biblioentry>-->
            <biblioentry xml:id="refXHTMLRole">
                <abbrev>XHTMLRole</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xhtml-role/">XHTML Role Attribute
                        Module</link>
                </title>
                <author>
                    <personname>M. Birbeck, et al</personname>
                </author>
                <date>2008</date>
            </biblioentry>
            <biblioentry xml:id="refXInclude">
                <abbrev>XInclude</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xinclude/">XML Inclusions (XInclude)
                        Version 1.0 (Second Edition)</link>
                </title>
                <author>
                    <personname>J. Marsh, et al</personname>
                </author>
                <date>15 November 2006</date>
            </biblioentry>
            <biblioentry xml:id="refXLink">
                <abbrev>XLink</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xlink11/">XML Linking Language (XLink)
                        Version 1.1 </link>
                </title>
                <author>
                    <personname>S. DeRose, et al</personname>
                </author>
                <date>27 June 2001</date>
            </biblioentry>
            <biblioentry xml:id="refXML">
                <abbrev>XML</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/2006/REC-xml-20060816/">Extensible Markup
                        Language (XML) 1.0 (Fourth Edition)</link>
                </title>
                <author>
                    <personname>T. Bray, et al</personname>
                </author>
                <date>November 2008</date>
            </biblioentry>
            <biblioentry xml:id="refXMLBase">
                <abbrev>XMLBase</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xmlbase/">XML Base (Second
                        Edition)</link>
                </title>
                <date>28 January 2009</date>
            </biblioentry>
            <biblioentry xml:id="refXMLID">
                <abbrev>XMLID</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xml-id/">xml:id Version 1.0</link>
                </title>
                <date>9 September 2005</date>
            </biblioentry>
            <biblioentry xml:id="refXMLInfoset">
                <abbrev>XMLInfoset</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xml-infoset/">XML Information Set (Second
                        Edition)</link>
                </title>
                <author>
                    <personname>J. Cowan, et al</personname>
                </author>
                <date>4 February 2004</date>
            </biblioentry>
            <biblioentry xml:id="refXMLNamespaces">
                <abbrev>XMLNAMES</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML 1.0
                        (Second Edition)</link>
                </title>
                <date>16 August 2006</date>
            </biblioentry>
            <biblioentry xml:id="refXMLSchema">
                <abbrev>XMLSchema</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/XML/Schema#dev">XML Schema:
                        Specifications</link>
                </title>
            </biblioentry>
            <biblioentry xml:id="refXMLStylesheet">
                <abbrev>XMLSTYLE</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xml-stylesheet/">Associating Style Sheets
                        with XML documents Version 1.0</link>
                    <remark role="todo">REMARK revision under way</remark>
                </title>
                <author>
                    <personname>James Clark</personname>
                </author>
                <date>29 June 1999</date>
            </biblioentry>
            <biblioentry xml:id="refXSDDatatypes">
                <abbrev>XSD-DATATYPES</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xmlschema-2/">XML Schema Part 2:
                        Datatypes Second Edition</link>
                </title>
                <author>
                    <personname>Paul V. Biron et al</personname>
                </author>
                <date>28 October 2004</date>
            </biblioentry>
            <biblioentry xml:id="refZ39862005">
                <abbrev>Z3986-2005</abbrev>
                <title>
                    <link xlink:href="http://www.niso.org/standards/resources/Z39-86-2005.html"
                        >ANSI/NISO Z39.86-2005: Specifications for the Digital Talking Book</link>
                </title>
                <author>
                    <personname>M. Moodie, et al</personname>
                </author>
                <date>2005</date>
            </biblioentry>
        </bibliodiv>
        <bibliodiv>
            <title>Informative</title>
            <biblioentry xml:id="refCMOS">
                <abbrev>CMoS</abbrev>
                <title>
                    <link xlink:href="http://www.chicagomanualofstyle.org/">Chicago Manual of
                        Style</link>
                </title>
            </biblioentry>
            <biblioentry xml:id="refN3">
                <abbrev>N3</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/DesignIssues/Notation3">Notation3</link>
                </title>
                <editor>
                    <personname>Berners-Lee, Tim</personname>
                </editor>
                <date>1998</date>
            </biblioentry>
            <biblioentry xml:id="refOPF">
                <abbrev>OPF</abbrev>
                <title>
                    <link xlink:href="http://www.idpf.org/2007/opf/OPF_2.0_final_spec.html"> Open
                        Packaging Format (OPF) 2.0 v1.0</link>
                </title>
                <date>11 September 2007</date>
            </biblioentry>
            <biblioentry xml:id="refRDFs">
                <abbrev>RDFS</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/rdf-schema/">RDF Vocabulary Description
                        Language 1.0: RDF Schema</link>
                </title>
                <editor>
                    <personname>D. Brickley, et al</personname>
                </editor>
                <date>10 February 2004</date>
            </biblioentry>
            <biblioentry xml:id="refXHTMLMOD11">
                <abbrev>XHTMLMOD</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xhtml-modularization/">XHTML™
                        Modularization 1.1</link>
                </title>
                <author>
                    <personname>D Austin, et al</personname>
                </author>
                <date>8 October 2008</date>
            </biblioentry>
            <biblioentry xml:id="refXPROC">
                <abbrev>XProc</abbrev>
                <title>
                    <link xlink:href="http://www.w3.org/TR/xproc/">XProc: An XML Pipeline
                        Language</link>
                </title>
                <author>
                    <personname>Norman Walsh, et al</personname>
                </author>
                <date>9 March 2010</date>
            </biblioentry>
        </bibliodiv>
    </bibliography>

</book>
