<?xml version="1.0" encoding="utf-8"?>
<grammar ns="http://www.daisy.org/ns/z3998/authoring/" xmlns="http://relaxng.org/ns/structure/1.0" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:xlink="http://www.w3.org/1999/xlink">
    <info xmlns="http://docbook.org/ns/docbook">
        <title xreflabel="list">The list module</title>
        <annotation annotates="/">
            <para role="desc-main">This module defines the {list} element for structuring ordered and unordered simple sets of items.</para>
            <simplelist role="def-dependencies">
                <member xlink:href="z3998-global-classes.rng"/>
                <member xlink:href="z3998-datatypes.rng"/>
            </simplelist>
        </annotation>
        <author>
            <personname>Markus Gylling</personname>
            <email>mgylling@daisy.org</email>
        </author>
        <copyright>
            <year>2009</year>
            <year>2010</year>
            <year>2011</year>
            <year>2012</year>
            <holder>DAISY Consortium</holder>
        </copyright>
        <legalnotice>
            <para>This module is licensed under a Creative Commons Attribution 3.0 license, a copy of which is available at <link xlink:href="http://creativecommons.org/licenses/by/3.0/">http://creativecommons.org/licenses/by/3.0/</link></para>
            <para>For complete licensing information, please refer to the LICENSE file that came with this distribution, a copy of which is also available from the DAISY web site at <link xlink:href="http://www.daisy.org">www.daisy.org</link></para>
        </legalnotice>
        <revhistory>
            <revision>
                <date>2012-12-19</date>
                <authorinitials>MGy</authorinitials>
                <revdescription>
                    <para>Initial version</para>
                </revdescription>
            </revision>
        </revhistory>
    </info>
    <div>
        <define name="z3998.list" xml:id="z3998.list">
            <element name="list">
                <annotation annotates=".." condition="required" xmlns="http://docbook.org/ns/docbook">
                    <!-- <dcterms:title z:short="list (block)">The {list} element (Block)</dcterms:title> -->
                    <title xreflabel="list">The {list} element</title>
                    <para role="desc-main" xlink:role="inherit-common" xlink:href="z3998.list"/>
                    <!-- <z:info> The {Block} variant is an adaptation for use including lists where each item is offset its siblings. </z:info> -->
                    <para role="desc-sub" xlink:role="inherit-common" xlink:href="z3998.list"/>
                    <synopsis role="def-context">{[[#z3998.Block.class]]}</synopsis>
                    <synopsis role="def-content" condition="The content model must allow {[[#z3998.list.item.block item]]} elements.">{[[#z3998.list.item.block]]+}</synopsis>
                    <synopsis role="def-attlist" condition="The attribute model must allow the {[[#z3998.list.type.attrib type]]} and [[#z3998.list.type.attrib type]] attributes.">{[[#z3998.Block.attrib]], [[#z3998.list.type.attrib]]?, [[#z3998.list.start.attrib]]?}</synopsis>
                </annotation>
                <ref name="z3998.list.block.attlist"/>
                <ref name="z3998.list.block.content"/>
            </element>
        </define>
        <define name="z3998.list.phrase" xml:id="z3998.list.phrase">
            <element name="list">
                <annotation annotates=".." condition="required" xmlns="http://docbook.org/ns/docbook">
                    <title xreflabel="list (phrase)">The {list} element (Phrase)</title>
                    <para role="desc-main" xlink:role="inherit-common" xlink:href="z3998.list"/>
                    <para role="desc-sub">The {Phrase} variant is an adaptation for use embedding lists where the items flow together as part of the document narrative.</para>
                    <para role="desc-sub" xlink:role="inherit-common" xlink:href="z3998.list"/>
                    <synopsis role="def-context">{[[#z3998.Phrase.class]]}</synopsis>
                    <synopsis role="def-content" condition="The content model must allow {[[#z3998.list.item.phrase item]]} elements.">{[[#z3998.list.item.phrase]]+}</synopsis>
                    <synopsis role="def-attlist" condition="The attribute model must allow the {[[#z3998.list.type.attrib type]]} and [[#z3998.list.type.attrib type]] attributes.">{[[#z3998.Phrase.attrib]], [[#z3998.list.type.attrib]]?, [[#z3998.list.start.attrib]]?}</synopsis>
                </annotation>
                <ref name="z3998.list.phrase.attlist"/>
                <ref name="z3998.list.phrase.content"/>
            </element>
        </define>
        <define name="z3998.list.block.attlist" combine="interleave">
            <ref name="z3998.Block.attrib"/>
            <ref name="z3998.list.attrib"/>
        </define>
        <define name="z3998.list.phrase.attlist" combine="interleave">
            <ref name="z3998.Phrase.attrib"/>
            <ref name="z3998.list.attrib"/>
        </define>
        <define name="z3998.list.attrib" xml:id="z3998.list.attrib">
            <choice>
                <ref name="z3998.list.attlist.ordered"/>
                <ref name="z3998.list.attlist.unordered"/>
                <ref name="z3998.list.attlist.unspecified"/>
            </choice>
        </define>
        <define name="z3998.list.attlist.ordered" combine="interleave">
            <ref name="z3998.list.type.ordered.attrib"/>
            <optional>
                <ref name="z3998.list.start.attrib"/>
            </optional>
        </define>
        <define name="z3998.list.attlist.unordered" combine="interleave">
            <ref name="z3998.list.type.unordered.attrib"/>
        </define>
        <define name="z3998.list.type.attrib" combine="interleave">
            <!-- note: this isnt referenced from the defines, just here for doc purposes... -->
            <attribute name="type">
                <annotation annotates=".." condition="required" xmlns="http://docbook.org/ns/docbook">
                    <title xreflabel="type">The {type} attribute</title>
                    <para role="desc-main">The {type} attribute specifies whether the {item}s in the list are ordered or unordered.</para>
                    <synopsis role="def-context">{[[#z3998.list]]}</synopsis>
                    <synopsis role="def-content">{'ordered'|'unordered'}</synopsis>
                </annotation>
                <choice>
                    <value>unordered</value>
                    <a:documentation>The order of the items in this list is significant.</a:documentation>
                    <value>unordered</value>
                    <a:documentation>The order of the items in this list is insignificant.</a:documentation>
                </choice>
            </attribute>
        </define>
        <define name="z3998.list.type.unordered.attrib" combine="interleave">
            <attribute name="type">
                <a:documentation>Specifies whether the {item}s in the list are ordered or unordered.</a:documentation>
                <value>unordered</value>
                <a:documentation>The order of the items in this list is insignificant.</a:documentation>
            </attribute>
        </define>
        <define name="z3998.list.type.ordered.attrib" combine="interleave">
            <attribute name="type">
                <a:documentation>Specifies whether the {item}s in the list are ordered or unordered.</a:documentation>
                <value>ordered</value>
                <a:documentation>The order of the items in this list is significant.</a:documentation>
            </attribute>
        </define>
        <define name="z3998.list.attlist.unspecified" xml:id="z3998.list.attlist.unspecified">
            <empty/>
        </define>
        <define name="z3998.list.block.content" xml:id="z3998.list.block.content">
            <interleave>
                <oneOrMore>
                    <ref name="z3998.list.item.block"/>
                </oneOrMore>
                <zeroOrMore>
                    <ref name="z3998.list.extra.class"/>
                </zeroOrMore>
            </interleave>
        </define>
        <define name="z3998.list.phrase.content" xml:id="z3998.list.phrase.content">
            <interleave>
                <oneOrMore>
                    <ref name="z3998.list.item.phrase"/>
                </oneOrMore>
                <zeroOrMore>
                    <ref name="z3998.list.extra.class"/>
                </zeroOrMore>
            </interleave>
        </define>
    </div>
    <div>
        <define name="z3998.list.start.attrib" xml:id="z3998.list.start.attrib">
            <attribute name="start">
                <annotation annotates=".." condition="required" xmlns="http://docbook.org/ns/docbook">
                    <title xreflabel="start">The {start} attribute</title>
                    <para role="desc-main">The {start} attribute specifies the ordinal value for the first list {item}'s prefix.</para>
                    <para role="desc-sub">If omitted, the implicit value {1} is assumed.</para>
                    <para role="desc-sub">This attribute is only valid when used with ordered lists (as defined by the presence and value of the {type} attribute).</para>
                    <synopsis role="def-context">{[[#z3998.list]]}</synopsis>
                    <synopsis role="def-content">{[[#Integer.datatype]]}</synopsis>
                </annotation>
                <ref name="Integer.datatype"/>
            </attribute>
        </define>
    </div>
    <div>
        <define name="z3998.list.item.block" xml:id="z3998.list.item.block">
            <element name="item">
                <annotation annotates=".." condition="required" xmlns="http://docbook.org/ns/docbook">
                    <!-- <dcterms:title z:short="item (block)">The {item} element (Block)</dcterms:title> -->
                    <title xreflabel="item">The {item} element</title>
                    <para role="desc-main" xlink:role="inherit-common" xlink:href="z3998.list.item"/>
                    <para role="desc-sub" xlink:role="inherit-common" xlink:href="z3998.list.item"/>
                    <synopsis role="def-context" condition="fixed">{[[#z3998.list]]}</synopsis>
                    <synopsis role="def-content">{(z3998.Block.class)+ | (text | z3998.Text.class | z3998.Phrase.class)+}</synopsis>
                    <synopsis role="def-attlist">{[[#z3998.Phrase.attrib]]}</synopsis>
                </annotation>
                <ref name="z3998.list.item.block.attlist"/>
                <ref name="z3998.list.item.block.content"/>
                <sch:rule context="default:item">
                    <sch:assert test="normalize-space(.) or *">The {item} element must neither be empty nor contain only whitespace.</sch:assert>
                </sch:rule>
            </element>
        </define>
        <define name="z3998.list.item.block.attlist" combine="interleave">
            <ref name="z3998.Block.attrib"/>
        </define>
        <define name="z3998.list.item.block.content" xml:id="z3998.list.item.block.content">
            <ref name="z3998.Flow.choice.model"/>
        </define>
        <define name="z3998.list.item.phrase" xml:id="z3998.list.item.phrase">
            <element name="item">
                <annotation annotates=".." condition="required" xmlns="http://docbook.org/ns/docbook">
                    <title xreflabel="item (phrase)">The {item} element (Phrase)</title>
                    <para role="desc-main" xlink:role="inherit-common" xlink:href="z3998.list.item"/>
                    <para role="desc-sub" xlink:role="inherit-common" xlink:href="z3998.list.item"/>
                    <synopsis role="def-context" condition="fixed">{[[#z3998.list.phrase]]}</synopsis>
                    <synopsis role="def-content">{(text | z3998.Text.class | z3998.Phrase.class)+}</synopsis>
                    <synopsis role="def-attlist">{[[#z3998.Phrase.attrib]]}</synopsis>
                </annotation>
                <ref name="z3998.list.item.phrase.attlist"/>
                <ref name="z3998.list.item.phrase.content"/>
            </element>
        </define>
        <define name="z3998.list.item.phrase.attlist" combine="interleave">
            <ref name="z3998.Phrase.attrib"/>
        </define>
        <define name="z3998.list.item.phrase.content" xml:id="z3998.list.item.phrase.content">
            <ref name="z3998.Phrase.Text.mix.model"/>
        </define>
    </div>
    <div>
        <a:documentation>List module - content model specializations</a:documentation>
        <define name="z3998.list.extra.class" combine="choice">
            <a:documentation>class for contributing siblings to the list items</a:documentation>
            <ref name="z3998.Global.extra.class"/>
        </define>
    </div>
    <div>
        <a:documentation>List module - default content model contribution</a:documentation>
        <!-- Note: z3998.list.phrase is not contributed by default -->
        <define name="z3998.Block.core.class" combine="choice">
            <ref name="z3998.list"/>
        </define>
        <define name="z3998.toc.entry.elem.block.contrib" combine="choice">
            <ref name="z3998.list"/>
        </define>
    </div>
</grammar>
