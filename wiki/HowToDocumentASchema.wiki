#summary rules and principles for inline and externalized schema module documentation

<wiki:toc max_depth="3" />

Documentation is added to the RNG modules in order to
 * allow generation of the user-oriented schema documentation (which ends up in the `/schemadoc/` subdir of Profile Resource Directories)
 * allow generation of module abstract definitions (which ends up in main spec and in (some) Resource Directories)
 * allow expressions relating to licensing and versioning

The documentation style is intended to be used in both zedai and zeddist.

The documentation is predominantly expressed using RDF islands (although the classic RelaxNG `a:documentation` is also used in some cases), as detailed below. 

At build time and when generating the distribution version of the schemas (after absdef and userdoc generation), the RDF islands are discarded (some children turned into standard a:documentation elements, others dropped).

== Module-level Documentation ==
The module-level RDF island must be the first element child of the `rng:grammar` element of the module. It contains the following fields:

<dl>
<dt>dcterms:title</dt>
<dd>The module title. Must have a z:short attribute, containing a short version of the title. Not repeatable.</dd>
<dt>dcterms:description</dt>
<dd>A compact one-liner description of what the module contributes. Not repeatable.</dd>
<dt>dcterms:license</dt>
<dd>License information. Not repeatable. (See Issue 31)</dd>
<dt>dcterms:publisher</dt>
<dd>The publisher of the module. Not repeatable.</dd>
<dt>dcterms:creator</dt>
<dd>Creator/Editor of the module. Repeatable. Use of `dcterms:contributor` is also fine.</dd>
<dt>dcterms:issued</dt>
<dd>Date the module was issued. *TODO versioning and revision information.*</dd>
<dt>dcterms:requires</dt>
<dd>Other module that this module requires to "compile". Repeatable. This cannot easily be autogenerated in a non-simplified RNG schema, so needs to be manually added. Run the `schema-pool-diagnostics` target to get hints on which modules should be namedropped here.</dd>
</dl>

=== Module-level Documentation Example ===
{{{
 <rdf:RDF>
    <rdf:Description>
      <dcterms:title z:short="headings">The headings module</dcterms:title>
      <dcterms:description>This module defines the {[[#z3986.h]]}, {[[#z3986.hd]]} and {[[#z3986.hpart]]} elements, 
        representing headings and heading segments.</dcterms:description>      
      <dcterms:publisher>DAISY Consortium</dcterms:publisher>
      <dcterms:license rdf:resource="{LICENSE_TODO}" />
      <dcterms:creator>Markus Gylling</dcterms:creator>      
      <dcterms:issued>2009-12-21</dcterms:issued>
      <dcterms:requires rdf:resource="z3986-global-classes.rng" />
      <dcterms:requires rdf:resource="z3986-datatypes.rng" />
      <dcterms:requires rdf:resource="z3986-linking.rng" />
    </rdf:Description>
  </rdf:RDF>
}}}

== Pattern-level Documentation ==
RDF-islands-style is also added to all `element`, `attribute` and `data` patterns. May also be added to other types of defines in certain cases (the latter is only used by the absdef, not by the user doc.) 

The RDF islands must be the first element child of the `element`, `attribute`, `data` or `define` being documented. It contains the following fields:

<dl>
<dt>dcterms:title</dt>
<dd>The element/attribute/data/pattern title. Must have a `z:short` attribute, containing a short version of the title. Cannot be repeated.</dd>
<dt>dcterms:description</dt>
<dd>A compact one-liner description. Not repeatable.</dd>
<dt>z:info</dt>
<dd>Key information "following" the dcterms:description oneliner. Exhaustive information is not added here (see [#Longdescs] for that). Repeatable. Remember that stuff added to z:info will make it to the distribution version of the schemas (then as a:documentation), whereas [HowToDocumentASchema#Longdescs] wont. `z:info` may have `absdef-only` or `doc-only` attributes. </dd>
<dt>z:context</dt>
<dd>Describes the initial usage context of the element or attribute, in prose and/or RNC syntax. Only used by absdef, not user doc. Not used when a `data` element is being documented. </dd>
<dt>z:content</dt>
<dd>Describes the initial content model of the element or attribute, in prose and/or RNC syntax. If an element is empty, use an empty z:content element. Only used by absdef, not user doc. Not used when a `data` element is being documented. </dd>
<dt>z:attlist</dt>
<dd>Used only if an `element` is being documented. Describes the initial attribute set of the element, in prose and/or RNC syntax. Only used by absdef, not user doc.</dd>
<dt>dcterms:isRequiredBy @rdf:resource="."</dt>
<dd>Used to signal if the construct being documented is omittable on module activation. If this field is absent, then omittable.</dd>
<dt>sch:assert</dt>
<dd>The text child of any schematron `assert` appearing nested within the `element` or `attribute` being documented is considered part of the documentation for that element or attribute.</dd>
</dl>

=== Pattern-level Documentation Example ===
{{{
<define name="z3986.hd">      
      <element name="hd">
        <rdf:RDF>
          <rdf:Description>
            <dcterms:title z:short="hd">The hd element</dcterms:title>
            <dcterms:description>Represents a free-floating heading that is not associated with the 
              hierarchical structure of the document.</dcterms:description>    
            <z:info>The {[[#z3986.for.attrib]]} attribute may be used to associate a {hd} element with
              a construct that it is a heading for.</z:info>
            <z:context>{[[#z3986.Block.class]]}</z:context>          
            <z:content>{(text | [[[#z3986.Text.class]]] | [[[#z3986.Phrase.class]]])+}</z:content>            
            <z:attlist>{[[#z3986.Block.attrib]]}, {[[#z3986.for.attrib]]?}</z:attlist>
          </rdf:Description>
        </rdf:RDF>
        <ref name="z3986.hd.attlist"/>
        <ref name="z3986.hd.content"/>
        <sch:rule context="default:hd">          
          <sch:assert test="count(*) > 0 or string-length(normalize-space(.)) > 0"
            >The {hd} element must not be empty, nor contain only whitespace.</sch:assert>
        </sch:rule>
      </element>
</define>

}}}

== Wiki-style markup ==
In the elements above, the content strings added support the following wiki-style markup:
 * Links. Syntax: {{{[[uri label]] or [[uri]]}}}
 * Code. Syntax: {{{{content}}}}

== Module-external documentation ==

=== Snippets ===
The sources for short example snippets of module components resides in `trunk:src/doc/snippets/`. See `trunk:src/doc/snippets/ai-snippets.rng` for info. Note that this is schema-driven editing (which will work out-of-the-box if you use Oxygen). Note also that snippets are optional.

At build time, the snippets are (depending on the value of the `dest` attribute) brought into user doc and/or absdef.

=== Longdescs ===
The sources for longer discussions of module components resides in `trunk:src/doc/longdescs/`. See `trunk:src/doc/longdescs/ai-longdescs.rng` for info. Note that this is schema-driven editing (which will work out-of-the-box if you use Oxygen). Note also that longdescs are optional.

At build time, the longdescs are (depending on the value of the `dest` attribute) brought into user doc and/or absdef.