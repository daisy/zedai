<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="2.0" xmlns="http://relaxng.org/ns/structure/1.0"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:x="http://www.w3.org/1999/xhtml" xpath-default-namespace="http://www.w3.org/1999/xhtml">

  <xsl:output method="xml" version="1.0" encoding="UTF-8" omit-xml-declaration="no" indent="yes"/>

  <!-- name of the enum pattern  -->
  <xsl:param name="patternName" required="yes"/>
  <!-- nicename of the enum pattern  -->
  <xsl:param name="niceName" required="yes"/>
  <!-- mode: either
    individual, in which case each prop to be included must be namedropped in includeList
    descendant, in which case each prop to be included must have a parent with an id in includeList
    In the latter case, excludeList is also taken into account
  -->  
  <xsl:param name="mode" required="yes"/>  
  <!-- list of properties to include in enum (NMTOKENs, matches id's in input rdfa doc) -->
  <xsl:param name="includeList" as="xs:string" select="''"/>

  <!-- list of properties to exclude in enum in descendant mode (NMTOKENs, matches id's in input rdfa doc) -->
  <xsl:param name="excludeList" as="xs:string" select="''"/>
  
  <!-- list of names of defines to contribute the $patternName enum to -->
  <xsl:param name="contribList" as="xs:string" select="''"/>

  <xsl:variable name="nmtokens" as="xs:string*" select="tokenize(normalize-space($includeList),' ')"/>
  <xsl:variable name="excludes" as="xs:string*" select="tokenize(normalize-space($excludeList),' ')"/>
  <xsl:variable name="contrib" as="xs:string*" select="tokenize(normalize-space($contribList),' ')"/>

  <xsl:template match="/">

    <grammar xmlns="http://relaxng.org/ns/structure/1.0" xmlns:x="http://www.w3.org/1999/xhtml">

      <x:h1><xsl:value-of select="//head/title"/> CURIE Enumeration: <xsl:value-of
          select="$niceName"/>
      </x:h1>

      <x:p>Do not manually edit this file - it is autogenerated from RDF</x:p>
      
      <div>
        <x:h2>The <xsl:value-of select="$niceName"/> enumeration</x:h2>
        <define name="z3998.{$patternName}.vocab" combine="choice">
          <choice>
            <xsl:choose>
              <xsl:when test="$mode eq 'individual'">
                <xsl:for-each select="descendant::*[@typeof='rdf:Property']">
                  <xsl:if test="some $id in $nmtokens satisfies (@id eq $id)">
                    <value>
                      <xsl:value-of select="@id"/>
                    </value>
                  </xsl:if>
                </xsl:for-each>                
              </xsl:when>
              <xsl:otherwise> <!-- descendant mode -->
                <xsl:for-each select="descendant::*[@typeof='rdf:Property' 
                  and (some $id in $nmtokens satisfies(ancestor::*/@id = $id))
                  and not(some $ex in $excludes satisfies(./@id = $ex))]"> <!-- TODO PER doesnt work -->
                  <value>
                    <xsl:value-of select="@id"/>
                  </value>
                </xsl:for-each>
                
              </xsl:otherwise>
            </xsl:choose>
            
          </choice>
        </define>
      </div>
      
      <div>
        <x:h2><xsl:value-of select="$niceName"/> - default content model contribution</x:h2>

        <xsl:for-each select="$contrib">
          <xsl:variable name="name" select="normalize-space(.)"/>
          <define name="{$name}" combine="choice">
            <ref name="z3998.{$patternName}.vocab"/>
          </define>
        </xsl:for-each>
      </div>
      
    </grammar>

  </xsl:template>
</xsl:stylesheet>
